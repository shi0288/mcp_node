var async = require('async');
var moment = require('moment');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var cons = require('mcp_constants');
var userType = cons.userType;
var loanStatus = cons.loanStatus;
var investStatus = cons.investStatus;
var taskCons = cons.taskCons;
var userBillCons = cons.userBillCons;
var calCons = cons.calculateCons;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;
var taskService = service.taskService;
var userBillService = service.userBillService;
var calculateService = service.calculateService;
var checkService = service.checkService;

var LoanControl = function () {
};

LoanControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC01 创建项目
 */

LoanControl.prototype.checkLC01 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //生成id号
        function (cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, id);
                }
            });
        },
        //插入数据
        function (id, cb) {
            bodyNode.cond.status = loanStatus.waiting_verify;
            bodyNode.cond.id = id;
            bodyNode.cond.loan_money = 0;
            bodyNode.cond.create_time = dateUtil.getCurTime();
            var repay_typeTab = dc.main.get('repay_type');
            repay_typeTab.findOne({id: bodyNode.cond.repay_type}, {}, [], function (err, repay_typeObj) {
                if (repay_typeObj.type == 'out_debx') {
                    var loanRepayObjArr;
                    try {
                        loanRepayObjArr = calculateService.outDebxCal(bodyNode.cond);
                    } catch (err) {
                        cb(ec.E9050);
                        return;
                    }
                    var money = 0;
                    for (var i = 0; i < loanRepayObjArr.length; i++) {
                        money += loanRepayObjArr[i].money;
                    }
                    bodyNode.cond.money = money;
                }
                var loan = dc.main.get('loan');
                loan.save(bodyNode.cond, [], function (err) {
                    if (err) {
                        cb(ec.E9050);
                    } else {
                        cb(null, id);
                    }
                });
            });
        }
    ], function (err, id) {
        if (err) {
            cb(err);
        } else {
            var backNode = {};
            backNode.id = id;
            cb(null, backNode);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC02 初审项目
 */

LoanControl.prototype.checkLC02 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC02 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.raising, trail_time: dateUtil.getCurTime()}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            //添加任务
            loan.findOne({id: bodyNode.id}, {'raise_time': 1}, [], function (err, rst) {
                var cond = {};
                cond.loan_id = bodyNode.id;
                cond.type = taskCons['recheck'];
                cond.fireTime = dateUtil.toDate(rst.raise_time).getTime();
                cond.description = '募集时间满，修改状态为复核';
                taskService.add(cond, function (err) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                });
            }, {dateToString: true});

        }
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC03 放款
 */

LoanControl.prototype.checkLC03 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC03 = function (headNode, bodyNode, cb) {
    var loanTab = dc.main.get('loan');
    var investTab = dc.main.get('invest');
    async.waterfall([
        //获取项目信息
        function (cb) {
            loanTab.findOne({id: bodyNode.id}, {}, [], function (err, loan) {
                if (err) {
                    cb(ec.E5020);
                } else {
                    cb(null, loan);
                }
            })
        },
        //处理投资人账户
        function (loan, cb) {
            if (loan.status == loanStatus.recheck) {
                var cursor = investTab.find({
                    loan_id: loan.id,
                    status: investStatus.bid_success
                }, {}, []).sort().limit(null, null, true);
                cursor.toArray(function (err, data) {
                    var actualMoney = 0;
                    async.eachSeries(data, function (set, callback) {
                        var money = set.money;
                        if (set.coupon_money != undefined) {
                            money = money - set.coupon_money;
                        }
                        userBillService.frozenOutMoney(set.user_id,
                            money,
                            userBillCons.payType.GIVE_MONEY_TO_BORROWER,
                                "出借成功，取出出借金额, 借款ID：" + loan.id, function (err) {
                                if (!err) {
                                    actualMoney += money;
                                    callback(null);
                                } else {
                                    callback(ec.E5030);
                                }
                            });
                    }, function (err) {
                        cb(err, loan, actualMoney);
                    });
                })
            } else {
                cb(ec.E5000);
            }
        },
        //处理借款人账户
        function (loan, actualMoney, cb) {
            userBillService.balanceInMoney(loan.repay_user_id,
                actualMoney,
                userBillCons.payType.GIVE_MONEY_TO_BORROWER,
                    "借款到账, 借款ID：" + loan.id, function (err) {
                    if (err) {
                        cb(ec.E5010);
                    } else {
                        loanTab.update({id: loan.id}, {$set: {status: loanStatus.repaying, transfer_time: dateUtil.getCurTime()}}, [], function (err) {
                            if (err) {
                                cb(ec.E5040);
                            } else {
                                var cond = {};
                                cond.loan_id = loan.id;
                                cond.type = taskCons['calculate'];
                                cond.fireTime = new Date().getTime();
                                cond.description = '计算项目还款计划';
                                taskService.add(cond, function (err) {
                                    if (err) {
                                        cb(ec.E9999);
                                    } else {
                                        cb(null);
                                    }
                                });
                            }
                        });
                    }
                });
        }
    ], function (err) {
        cb(err);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC04 延期
 */

LoanControl.prototype.checkLC04 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC04 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {
        $set: {
            status: loanStatus.raising,
            raise_time: bodyNode.raise_time
        }
    }, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            //添加任务
            loan.findOne({id: bodyNode.id}, {'raise_time': 1}, [], function (err, rst) {
                var cond = {};
                cond.loan_id = bodyNode.id;
                cond.type = taskCons['recheck'];
                cond.fireTime = dateUtil.toDate(rst.raise_time).getTime();
                cond.description = '募集时间满，修改状态为复核';
                taskService.add(cond, function (err) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                });
            }, {dateToString: true});
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC05 流标
 */

LoanControl.prototype.checkLC05 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC05 = function (headNode, bodyNode, cb) {
    var loanTab = dc.main.get('loan');
    loanTab.findOne({id: bodyNode.id}, {}, [], function (err, loan) {
        if (err) {
            cb(ec.E9999);
        } else {
            if (loan == undefined || loan == null) {
                cb(ec.E9999);
            } else {
                if (loan.status == loanStatus.cancel) {
                    cb(null);
                    return;
                }
                loanTab.update({id: bodyNode.id}, {$set: {status: loanStatus.cancel}}, [], function (err, data) {
                    if (err) {
                        log.error(headNode.messageid + '更新项目状态出错');
                        cb(ec.E9999);
                    } else {
                        //解冻用户金额
                        var investTab = dc.main.get('invest');
                        var cursor = investTab.find({loan_id: bodyNode.id, status: investStatus.bid_success}, {}, []).sort({create_time: 1});
                        cursor.toArray(function (err, data) {
                            async.eachSeries(data, function (investObj, callback) {
                                var des = "出借：" + loan.name + "流标，解冻金额:" + investObj.money / 100;
                                //账户操作
                                userBillService.thawMoney(investObj.user_id,
                                    investObj.money,
                                    userBillCons.payType.CANCEL_LOAN,
                                    des, function (err) {
                                        callback(err);
                                    });
                            }, function (err) {
                                if (err) {
                                    cb(ec.E9999);
                                } else {
                                    cb(null);
                                }
                            });
                        });
                    }
                });
            }
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC06  正常还款
 */

LoanControl.prototype.checkLC06 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC06 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //第一步查询相关还款
        function (cb) {
            var loan_repayTab = dc.main.get('loan_repay');
            loan_repayTab.findOne({id: bodyNode.id}, {}, [], function (err, loan_repayObj) {
                cb(null, loan_repayObj);
            })
        }, function (loan_repayObj, cb) {
            var loanId = loan_repayObj.loan_id;
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: loanId}, {}, [], function (err, loanObj) {
                cb(null, loan_repayObj, loanObj);
            })
        },
//        //债权投资的还款
//        function (loan_repayObj, loanObj, cb) {
//            var creditor_investTab = dc.main.get('creditor_invest');
//            var cursor = creditor_investTab.find({
//                loan_id: loanObj.id,
//                status: investStatus.bid_success
//            }, {}, []).sort({create_time: 1});
//            cursor.count(function (err, count) {
//                var startNum = 0;
//                var i = 0;
//                async.whilst(
//                    function () {
//                        return count > 0;
//                    }, function (whileCb) {
//                        console.log("债权还款计算中...");
//                        cursor.limit(startNum, calCons.split_num);
//                        cursor.toArray(function (err, data) {
//                            async.eachSeries(data, function (creditorInvestObj, callback) {
//                                var creditor_invest_repayTab = dc.main.get('creditor_invest_repay');
//                                creditor_invest_repayTab.findOne({
//                                    creditor_invest_id: investObj.id,
//                                    period: loan_repayObj.period
//                                }, {}, [], function (err, creditor_invest_repayObj) {
//                                    //已处理
//                                    if (creditor_invest_repayObj.status == 1) {
//                                        callback();
//                                    } else {
//                                        var des = "投资：" + creditor_invest_repayObj.id + "收到还款, 还款ID:"
//                                            + loan_repayObj.id + "  借款ID:"
//                                            + loanObj.id + "  本金："
//                                            + creditor_invest_repayObj.money / 100 + "  利息：" + creditor_invest_repayObj.interest / 100;
//                                        //账户操作
//                                        userBillService.balanceInMoney(creditorInvestObj.user_id,
//                                            creditor_invest_repayObj.money + creditor_invest_repayObj.interest,
//                                            userBillCons.payType.NORMAL_REPAY,
//                                            des, function (err) {
//                                                //更新还款状态
//                                                creditor_invest_repayObj.update({id: creditor_invest_repayObj.id}, {$set: {status: 1}}, [], function () {
//                                                    callback();
//                                                })
//                                            });
//                                    }
//                                });
//                            }, function (err) {
//                                console.log(err);
//                                i++;
//                                startNum = i * calCons.split_num;
//                                count -= calCons.split_num;
//                                whileCb();
//                            });
//                        });
//                    }, function (err) {
//                        console.log(err);
//                    }
//                );
//            });
//        },
        function (loan_repayObj, loanObj, cb) {
            var investTab = dc.main.get('invest');
            var cursor = investTab.find({
                loan_id: loanObj.id,
                status: investStatus.bid_success
            }, {}, []).sort({create_time: 1});
            cursor.count(function (err, count) {
                var startNum = 0;
                var i = 0;
                async.whilst(
                    function () {
                        return count > 0;
                    }, function (whileCb) {
                        cursor.limit(startNum, calCons.split_num);
                        cursor.toArray(function (err, data) {
                            async.eachSeries(data, function (investObj, callback) {
                                var invest_repayTab = dc.main.get('invest_repay');
                                invest_repayTab.findOne({
                                    invest_id: investObj.id,
                                    period: loan_repayObj.period
                                }, {}, [], function (err, invest_repayObj) {
                                    //如果已经处理，则不再处理
                                    if (invest_repayObj.status == 1) {
                                        callback();
                                    } else {
                                        var des = "出借：" + investObj.id + "收到回款, 还款ID:"
                                            + loan_repayObj.id + "  借款ID:"
                                            + loanObj.id + "  本金："
                                            + invest_repayObj.money / 100 + "  利息：" + invest_repayObj.interest / 100;
                                        //账户操作
                                        userBillService.balanceInMoney(investObj.user_id,
                                                invest_repayObj.money + invest_repayObj.interest,
                                            userBillCons.payType.NORMAL_REPAY,
                                            des, function (err) {
                                                //更新还款状态
                                                invest_repayTab.update({id: invest_repayObj.id}, {$set: {status: 1}}, [], function () {
                                                    callback();
                                                })
                                            });
                                    }
                                });
                            }, function (err) {
                                i++;
                                startNum = i * calCons.split_num;
                                count -= calCons.split_num;
                                whileCb();
                            });
                        });
                    }, function (err) {
                        if (loan_repayObj.status == 1) {
                            cb();
                        } else {
                            // 借款者的账户，扣除还款
                            var des = "借款：" + loanObj.id + "正常还款, 还款ID："
                                + loan_repayObj.id + "  本金："
                                + loan_repayObj.money / 100 + "  利息：" + loan_repayObj.interest / 100;
                            userBillService.balanceOMoney(
                                loanObj.repay_user_id,
                                    loan_repayObj.money + loan_repayObj.interest,
                                userBillCons.payType.NORMAL_REPAY,
                                des, function (err) {
                                    var loan_repayTab = dc.main.get('loan_repay');
                                    loan_repayTab.update({id: loan_repayObj.id}, {$set: {status: 1}}, [], function (err) {
                                        //检测是否时最后一期
                                        if (loan_repayObj.period == loan_repayObj.all_period) {
                                            var loanTab = dc.main.get('loan');
                                            loanTab.update({id: loanObj.id}, {$set: {status: loanStatus.complete, finish_time: dateUtil.getCurTime()}}, [], function (err) {
                                                cb();
                                            })
                                        } else {
                                            cb();
                                        }
                                    })
                                });
                        }
                    }
                );
            });
        }
    ], function (err, rst) {
        cb(err);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC07 出借汇总表
 */

LoanControl.prototype.checkLC07 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.fields, function (err) {
                checkCb(err);
            });
        },
        //第三步检查是否有条件字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第四步检查是否有排序的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.sort, function (err) {
                checkCb(err);
            });
        }
    ], function (err) {
        cb(err);
    });
};


LoanControl.prototype.handleLC07 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var sql = "select a.*,b.realname as repayRealname,b.username as repayName,e.realname  as borrowRealname,e.username  as borrowName,c.name as repayTypeName,c.unit,d.name as loanTypeName " +
        "from loan a,user b,user e,repay_type c,dict d " +
        "where a.repay_user_id=b.id and a.borrow_user_id=e.id and a.repay_type=c.id and a.loan_type=d.id";
    var countSql = "select count(a.id) as count " +
        "from loan a,user b,user e,repay_type c,dict d " +
        "where a.repay_user_id=b.id and a.borrow_user_id=e.id and a.repay_type=c.id and a.loan_type=d.id";
    var dealCond = {};
    for (var key in bodyNode.cond) {
        dealCond["a." + key] = bodyNode.cond[key];
    }
    var condiStr = table.condition(dealCond);
    if (condiStr != null && condiStr != undefined && condiStr != '') {
        sql += '  and ' + condiStr;
        countSql += '  and ' + condiStr;
    }
    sql += " order by create_time desc limit " + bodyNode.skip + ',' + bodyNode.limit;
    var conn = dc.main.getConn();
    conn.execute(sql, [], function (err, data) {
        if (err) {
            cb(err, null);
        } else {
            var backBodyNode = {};
            for (var key in data) {
                if (data[key]['create_time'] != undefined) {
                    data[key]['create_time'] = moment(data[key]['create_time']).format("YYYY-MM-DD HH:mm:ss");
                }
            }
            backBodyNode.rst = data;
            conn.execute(countSql, [], function (err, data) {
                backBodyNode.count = data[0].count;
                cb(null, backBodyNode);
            });
        }
    });

};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC08 出借明细表
 */

LoanControl.prototype.checkLC08 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    cb(null);
};
LoanControl.prototype.handleLC08 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var sql = "select b.id,b.name,rt.name as repayTypeName,dic.name as loanTypeName,b.agreement," +
        "repayUser.username as repayUsername,repayUser.realname as repayRealname ," +
        " borrowUser.username as borrowUsername,borrowUser.realname as borrowRealname," +
        "investUser.username as investUsername,investUser.realname as investRealname," +
        "reffers.username as refUsername,reffers.realname as refRealname," +
        "a.money,b.rate,a.create_time,b.status  " +
        "from invest a LEFT JOIN loan b on a.loan_id=b.id " +
        "LEFT JOIN  user investUser on a.user_id=investUser.id " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id " +
        "LEFT JOIN user reffers on reffers.username=investUser.referrer " +
        "LEFT JOIN repay_type rt on rt.id=b.repay_type " +
        "LEFT JOIN dict dic on dic.id=b.loan_type " +
        "where a.status!=1100 and b.status>=1200";
    var countSql = "select count(a.id) as count " +
        "from invest a LEFT JOIN loan b on a.loan_id=b.id " +
        "LEFT JOIN  user investUser on a.user_id=investUser.id " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id " +
        "LEFT JOIN user reffers on reffers.username=investUser.referrer " +
        "LEFT JOIN repay_type rt on rt.id=b.repay_type " +
        "LEFT JOIN dict dic on dic.id=b.loan_type " +
        "where a.status!=1100 and b.status>=1200";
    var dealCond = {};
    for (var key in bodyNode.cond) {
        dealCond["a." + key] = bodyNode.cond[key];
    }
    var condiStr = table.condition(dealCond);
    if(condiStr!=''){
        condiStr=" and "+condiStr;
    }
    if (bodyNode.loanId != null && bodyNode.loanId != undefined && bodyNode.loanId != '') {
        condiStr += " and b.id='" + bodyNode.loanId + "'";
    }
    if (bodyNode.investUsername != null && bodyNode.investUsername != undefined && bodyNode.investUsername != '') {
        condiStr += " and investUser.username='" + bodyNode.investUsername + "'";
    }
    if (bodyNode.repayUsername != null && bodyNode.repayUsername != undefined && bodyNode.repayUsername != '') {
        condiStr += " and repayUser.username='" + bodyNode.repayUsername + "'";
    }
    if (bodyNode.borrowUsername != null && bodyNode.borrowUsername != undefined && bodyNode.borrowUsername != '') {
        condiStr += " and borrowUser.username='" + bodyNode.borrowUsername + "'";
    }

    if (bodyNode.refUsername != null && bodyNode.refUsername != undefined && bodyNode.refUsername != '') {
        condiStr += " and reffers.username='" + bodyNode.refUsername + "'";
    }
    if (condiStr != null && condiStr != undefined && condiStr != '') {
        sql +=condiStr;
        countSql +=condiStr;
    }
    sql += " order by a.create_time desc limit " + bodyNode.skip + ',' + bodyNode.limit;
    var conn = dc.main.getConn();
    conn.execute(sql, [], function (err, data) {
        if (err) {
            cb(err, null);
        } else {
            var backBodyNode = {};
            for (var key in data) {
                if (data[key]['create_time'] != undefined) {
                    data[key]['create_time'] = moment(data[key]['create_time']).format("YYYY-MM-DD HH:mm:ss");
                }
            }
            backBodyNode.rst = data;
            conn.execute(countSql, [], function (err, data) {
                backBodyNode.count = data[0].count;
                cb(null, backBodyNode);
            });
        }
    });

};



/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC09 还款汇总表
 */

LoanControl.prototype.checkLC09 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    cb(null);
};
LoanControl.prototype.handleLC09 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var sql = "SELECT b.id,b.name,rt.name as repayTypeName,dic.name as loanTypeName,b.agreement," +
        "repayUser.username as repayUsername,repayUser.realname as repayRealname," +
        "borrowUser.username as borrowUsername,borrowUser.realname as borrowRealname," +
        "b.day_month,b.deadline,b.money,b.rate,b.status," +
        "(select sum(interest) from loan_repay as lre where lre.loan_id=b.id) as allInterest " +
        "from loan b LEFT JOIN repay_type rt on rt.id=b.repay_type LEFT JOIN dict dic on dic.id=b.loan_type " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id  " +
        "where b.status>=1400 ";
    var countSql = "SELECT count(b.id) as count " +
        "from loan b LEFT JOIN repay_type rt on rt.id=b.repay_type LEFT JOIN dict dic on dic.id=b.loan_type " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id  " +
        "where b.status>=1400 ";

    var dealCond = {};
    for (var key in bodyNode.cond) {
        dealCond["b." + key] = bodyNode.cond[key];
    }
    var condiStr = table.condition(dealCond);
    if(condiStr!=''){
        condiStr=" and "+condiStr;
    }

    if (bodyNode.loanId != null && bodyNode.loanId != undefined && bodyNode.loanId != '') {
        condiStr += " and b.id='" + bodyNode.loanId + "'";
    }
    if (bodyNode.repayUsername != null && bodyNode.repayUsername != undefined && bodyNode.repayUsername != '') {
        condiStr += " and repayUser.username='" + bodyNode.repayUsername + "'";
    }
    if (bodyNode.borrowUsername != null && bodyNode.borrowUsername != undefined && bodyNode.borrowUsername != '') {
        condiStr += " and borrowUser.username='" + bodyNode.borrowUsername + "'";
    }
    if (bodyNode.status != null && bodyNode.status != undefined) {
        condiStr += " and b.status='" + bodyNode.status + "'";
    }

    if (condiStr != null && condiStr != undefined && condiStr != '') {
        sql +=condiStr;
        countSql +=condiStr;
    }
    sql += " order by b.id desc limit " + bodyNode.skip + ',' + bodyNode.limit;
    var conn = dc.main.getConn();
    conn.execute(sql, [], function (err, data) {
        if (err) {
            cb(err, null);
        } else {
            var backBodyNode = {};
            backBodyNode.rst = data;
            conn.execute(countSql, [], function (err, data) {
                backBodyNode.count = data[0].count;
                cb(null, backBodyNode);
            });
        }
    });

};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC10 还款计划表
 */

LoanControl.prototype.checkLC10 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    cb(null);
};
LoanControl.prototype.handleLC10 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var sql = "select  a.id as repayId,a.status,a.repay_day,a.money as cur_money,a.interest,a.all_period,a.period,b.id,b.name,rt.name as repayTypeName,dic.name as loanTypeName,b.agreement," +
        "repayUser.username as repayUsername,repayUser.realname as repayRealname," +
        "borrowUser.username as borrowUsername,borrowUser.realname as borrowRealname," +
        "b.deadline,b.money,b.rate,b.status as loanStatus,b.accrue_time " +
        "from loan_repay a LEFT JOIN loan b on a.loan_id=b.id " +
        "LEFT JOIN repay_type rt on rt.id=b.repay_type " +
        "LEFT JOIN dict dic on dic.id=b.loan_type " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id " +
        "where b.status>=1400 ";

    var countSql = "select  count(b.id) as count  " +
        "from loan_repay a LEFT JOIN loan b on a.loan_id=b.id " +
        "LEFT JOIN repay_type rt on rt.id=b.repay_type " +
        "LEFT JOIN dict dic on dic.id=b.loan_type " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id " +
        "where b.status>=1400 ";

    var dealCond = {};
    for (var key in bodyNode.cond) {
        dealCond["a." + key] = bodyNode.cond[key];
    }
    var condiStr = table.condition(dealCond);
    if(condiStr!=''){
        condiStr=" and "+condiStr;
    }

    if (bodyNode.loanId != null && bodyNode.loanId != undefined && bodyNode.loanId != '') {
        condiStr += " and b.id='" + bodyNode.loanId + "'";
    }
    if (bodyNode.repayUsername != null && bodyNode.repayUsername != undefined && bodyNode.repayUsername != '') {
        condiStr += " and repayUser.username='" + bodyNode.repayUsername + "'";
    }
    if (bodyNode.borrowUsername != null && bodyNode.borrowUsername != undefined && bodyNode.borrowUsername != '') {
        condiStr += " and borrowUser.username='" + bodyNode.borrowUsername + "'";
    }
    if (bodyNode.status != null && bodyNode.status != undefined) {
        condiStr += " and b.status='" + bodyNode.status + "'";
    }

    if (condiStr != null && condiStr != undefined && condiStr != '') {
        sql +=condiStr;
        countSql +=condiStr;
    }
    sql += " order by b.id desc limit " + bodyNode.skip + ',' + bodyNode.limit;
    var conn = dc.main.getConn();
    conn.execute(sql, [], function (err, data) {
        if (err) {
            cb(err, null);
        } else {
            var backBodyNode = {};
            for (var key in data) {
                    data[key]['accrue_time'] = moment(data[key]['accrue_time']).format("YYYY-MM-DD");
                    data[key]['repay_day'] = moment(data[key]['repay_day']).format("YYYY-MM-DD");
            }
            backBodyNode.rst = data;
            conn.execute(countSql, [], function (err, data) {
                backBodyNode.count = data[0].count;
                cb(null, backBodyNode);
            });
        }
    });

};



/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC11 还款明细表
 */

LoanControl.prototype.checkLC11 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    cb(null);
};
LoanControl.prototype.handleLC11 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var sql = "SELECT b.id,b.name,b.accrue_time,rt.name as repayTypeName,dic.name as loanTypeName,b.agreement," +
        "repayUser.username as repayUsername,repayUser.realname as repayRealname," +
        "borrowUser.username as borrowUsername,borrowUser.realname as borrowRealname," +
        "investUser.username as investUsername,investUser.realname as investRealname," +
        "b.money,b.rate,ire.repay_day,ire.period,ire.all_period,ire.money as cur_money,ire." +
        "interest,b.status as loanStatus,ire.status " +
        "from invest_repay ire LEFT JOIN invest a on ire.invest_id=a.id " +
        "LEFT JOIN loan b on a.loan_id=b.id LEFT JOIN loan_repay lre on b.id= lre.loan_id " +
        "LEFT JOIN repay_type rt on rt.id=b.repay_type " +
        "LEFT JOIN dict dic on dic.id=b.loan_type " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id "+
        "LEFT JOIN user investUser on investUser.id=a.user_id where 1=1";
    var countSql = "SELECT  count(b.id) as count " +
        "from invest_repay ire LEFT JOIN invest a on ire.invest_id=a.id " +
        "LEFT JOIN loan b on a.loan_id=b.id LEFT JOIN loan_repay lre on b.id= lre.loan_id " +
        "LEFT JOIN repay_type rt on rt.id=b.repay_type " +
        "LEFT JOIN dict dic on dic.id=b.loan_type " +
        "LEFT JOIN user repayUser on b.repay_user_id=repayUser.id " +
        "LEFT JOIN user borrowUser on borrowUser.id=b.borrow_user_id "+
        "LEFT JOIN user investUser on investUser.id=a.user_id where 1=1";
    var dealCond = {};
    for (var key in bodyNode.cond) {
        dealCond["ire." + key] = bodyNode.cond[key];
    }
    var condiStr = table.condition(dealCond);
    if(condiStr!=''){
        condiStr=" and "+condiStr;
    }

    if (bodyNode.loanId != null && bodyNode.loanId != undefined && bodyNode.loanId != '') {
        condiStr += " and b.id='" + bodyNode.loanId + "'";
    }
    if (bodyNode.repayId != null && bodyNode.repayId != undefined && bodyNode.repayId != '') {
        condiStr += " and lre.id='" + bodyNode.repayId + "'";
    }
    if (bodyNode.repayUsername != null && bodyNode.repayUsername != undefined && bodyNode.repayUsername != '') {
        condiStr += " and repayUser.username='" + bodyNode.repayUsername + "'";
    }
    if (bodyNode.borrowUsername != null && bodyNode.borrowUsername != undefined && bodyNode.borrowUsername != '') {
        condiStr += " and borrowUser.username='" + bodyNode.borrowUsername + "'";
    }
    if (bodyNode.status != null && bodyNode.status != undefined) {
        condiStr += " and b.status='" + bodyNode.status + "'";
    }

    if (condiStr != null && condiStr != undefined && condiStr != '') {
        sql +=condiStr;
        countSql +=condiStr;
    }
    sql += " order by b.id desc limit " + bodyNode.skip + ',' + bodyNode.limit;
    var conn = dc.main.getConn();
    console.log(sql);
    conn.execute(sql, [], function (err, data) {
        if (err) {
            cb(err, null);
        } else {
            var backBodyNode = {};
            for (var key in data) {
                data[key]['accrue_time'] = moment(data[key]['accrue_time']).format("YYYY-MM-DD");
                data[key]['repay_day'] = moment(data[key]['repay_day']).format("YYYY-MM-DD");
            }
            backBodyNode.rst = data;
            conn.execute(countSql, [], function (err, data) {
                backBodyNode.count = data[0].count;
                cb(null, backBodyNode);
            });
        }
    });

};


var loanControl = new LoanControl();
module.exports = loanControl;