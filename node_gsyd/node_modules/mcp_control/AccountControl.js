var async = require('async');
var dc = require('mcp_db').dc;

var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;
var cons = require('mcp_constants');
var userType = cons.userType;
var userBillCons = cons.userBillCons;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;

var AccountControl = function () {
};

AccountControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  AC01 账户记录查询
 */

AccountControl.prototype.checkAC01 = function (headNode, bodyNode, cb) {
    cb(null);
};


AccountControl.prototype.handleAC01 = function (headNode, bodyNode, cb) {
    var termTable = dc.mg.get("userbill");
    var cursor = termTable.find(bodyNode.cond, bodyNode.fields).sort(bodyNode.sort).skip(bodyNode.skip).limit(bodyNode.limit);
    cursor.toArray(function (err, data) {
        for (var key in data) {
            var set = data[key];
            set.create_time = dateUtil.toString(set.create_time);
        }
        var backBodyNode = {};
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  AC02 账户操作
 */

AccountControl.prototype.checkAC02 = function (headNode, bodyNode, cb) {
    cb(null);
};


AccountControl.prototype.handleAC02 = function (headNode, bodyNode, cb) {
    var accountTab = dc.main.get('account');
    async.waterfall([
        //获取余额信息
        function (cb) {
            accountTab.findOne({user_id: bodyNode.cond.user_id}, {}, [], function (err, accountObj) {
                cb(null, accountObj);
            })
        },
        function (accountObj, cb) {
            var money = accountObj.money;
            var frozen_money = accountObj.frozen_money;
            bodyNode.cond.proMoney = money;
            switch (bodyNode.type) {
                //增加余额
                case userBillCons.transType.IN:
                    //余额
                    money = money + bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case userBillCons.transType.OUT:
                    //余额
                    money = money - bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case userBillCons.transType.FROZEN:
                    //余额
                    money = money - bodyNode.cond.money;
                    frozen_money = frozen_money + bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case userBillCons.transType.THAW:
                    //余额
                    money = money + bodyNode.cond.money;
                    frozen_money = frozen_money - bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case userBillCons.transType.FROZEN_OUT:
                    frozen_money = frozen_money - bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                default:
                    cb(ec.E3070);
            }
        },
        function (money, frozen_money, userBill) {
            var userBillTab = dc.mg.get('userbill');
            userBill.create_time = new Date().getTime();
            userBillTab.save(userBill, [], function (err, _r1) {
                accountTab.update({user_id: userBill.user_id}, {
                    $set: {
                        money: money,
                        froze_money: frozen_money,
                        update_time: dateUtil.getCurTime()
                    }
                }, [], function (err, _r2) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                })
            });
        }
    ], function (err) {
        cb(err);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  AC03 查询账户信息
 */

AccountControl.prototype.checkAC03 = function (headNode, bodyNode, cb) {
    cb(null);
};


AccountControl.prototype.handleAC03 = function (headNode, bodyNode, cb) {
    var conn = dc.main.getConn();
    var backNode = {};
    var entity = {};
    backNode.entity = entity;
    async.waterfall([
        //第一步获取待收项
        function (cb) {
            var noRepaySql = "SELECT sum(a.money) as allMoney,sum(a.interest) as allInterest,sum(st_interest) as AllStInterest" +
                " from invest_repay a " +
                " where a.invest_id in (select id from invest b where b.user_id =(SELECT id from user c where c.username='" + bodyNode.username + "')) and status=0";
            conn.execute(noRepaySql, [], function (err, data) {
                if (err) {
                    cb(ec.E9999);
                } else {
                    if (data.length == 1) {
                        if (data[0].allMoney == undefined || data[0].allMoney == null) {
                            backNode.entity.noAllMoney = 0;
                        } else {
                            backNode.entity.noAllMoney = data[0].allMoney;
                        }
                        if (data[0].allInterest == undefined || data[0].allInterest == null) {
                            backNode.entity.noAllInterest = 0;
                        } else {
                            backNode.entity.noAllInterest = data[0].allInterest;
                        }
                        if (data[0].AllStInterest == undefined || data[0].AllStInterest == null) {
                            backNode.entity.noAllStInterest = 0;
                        } else {
                            backNode.entity.noAllStInterest = data[0].AllStInterest;
                        }
                    } else {
                        backNode.entity.noAllMoney = 0;
                        backNode.entity.noAllInterest = 0;
                        backNode.entity.noAllStInterest = 0;
                    }
                    cb(null);
                }
            })

        },
        //第二步获取已收项
        function (cb) {
            //已收
            var hadRepaySql = "SELECT sum(a.money) as allMoney,sum(a.interest) as allInterest,sum(st_interest) as AllStInterest" +
                " from invest_repay a " +
                " where a.invest_id in (select id from invest b where b.user_id =(SELECT id from user c where c.username='" + bodyNode.username + "')) and status=1";
            conn.execute(hadRepaySql, [], function (err, data) {
                if (err) {
                    cb(ec.E9999);
                } else {
                    if (data.length == 1) {
                        console.log(data);
                        if (data[0].allMoney == undefined || data[0].allMoney == null) {
                            backNode.entity.hadAllMoney = 0;
                        } else {
                            backNode.entity.hadAllMoney = data[0].allMoney;
                        }
                        if (data[0].allInterest == undefined || data[0].allInterest == null) {
                            backNode.entity.hadAllInterest = 0;
                        } else {
                            backNode.entity.hadAllInterest = data[0].allInterest;
                        }
                        if (data[0].AllStInterest == undefined || data[0].AllStInterest == null) {
                            backNode.entity.hadAllStInterest = 0;
                        } else {
                            backNode.entity.hadAllStInterest = data[0].AllStInterest;
                        }
                    } else {
                        backNode.entity.hadAllMoney = 0;
                        backNode.entity.hadAllInterest = 0;
                        backNode.entity.hadAllStInterest = 0;
                    }
                    cb(null);
                }
            })
        },
        //第三步获取账户信息
        function (cb) {
            var accountSql = "SELECT money,frozen_money from account where user_id=(SELECT id from user where username='" + bodyNode.username + "')";
            conn.execute(accountSql, [], function (err, data) {
                if (err) {
                    cb(ec.E9999);
                } else {
                    if (data.length == 1) {
                        if (data[0].money == undefined || data[0].money == null) {
                            backNode.entity.money = 0;
                        } else {
                            backNode.entity.money = data[0].money;
                        }
                        if (data[0].frozen_money == undefined || data[0].frozen_money == null) {
                            backNode.entity.frozen_money = 0;
                        } else {
                            backNode.entity.frozen_money = data[0].frozen_money;
                        }
                    } else {
                        backNode.entity.money = 0;
                        backNode.entity.frozen_money = 0;
                    }
                    cb(null);
                }
            })
        }
    ], function (err) {
        if (err) {
            cb(err);
        } else {
            cb(null, backNode);
        }
    });
};


var accountControl = new AccountControl();
module.exports = accountControl;