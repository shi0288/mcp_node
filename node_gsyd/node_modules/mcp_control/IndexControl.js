var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;

var cons = require('mcp_constants');
var userType = cons.userType;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var checkService = service.checkService;
var userService = service.userService;

var IndexControl = function () {
};

IndexControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  IDC01 首页数据
 */

IndexControl.prototype.checkIDC01 = function (headNode, bodyNode, cb) {
    /*//检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.autoId == null || bodyNode.autoId == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.cond == null || bodyNode.cond == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第三步检查ID字段是否需要给值
        function (checkCb) {
            if (bodyNode.autoId) {
                bodyNode.cond.id = digestUtil.createUUID();
            }
            if (bodyNode.cond.id == null || bodyNode.cond.id == undefined) {
                //checkCb(ec.E3040);
                checkCb(null);
            } else {
                table.findOne({id: bodyNode.cond.id}, {id: 1}, [], function (err, data) {
                    if (data) {
                        checkCb(ec.E3050);
                    }
                    else {
                        checkCb(null);
                    }
                });
            }
        }
    ], function (err) {
        cb(err);
    });*/
    cb(null);
};


IndexControl.prototype.handleIDC01 = function (headNode, bodyNode, cb) {
    /*var table = dc.main.get(bodyNode.table);
    table.save(bodyNode.cond, [], function (err) {
        if (err) {
            log.error(headNode.messageid + '保存信息出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });*/

    var conn = dc.main.getConn();
    var backNode = {};
    var rst={}
    var sql = "select count(*) count from user";
    console.log(sql);
    conn.execute(sql,[],function (err, data) {
        /*for(var key in data){
            for(var key2 in data[key]){
                console.log("12312312312312"+key2+":"+data[key][key2]);
            }
        }*/
        console.log("!!!!!!!!!!!!"+data[0]["count"]);
        rst.userCount=data[0]["count"];
    });
    sql = "select sum(interest) sum from loan_repay where status = 1";
    conn.execute(sql,[],function (err,data) {
        rst.zqsy=data[0]["sum"];
    });
    sql = "select sum(money) sum from invest where status=1200";
    conn.execute(sql, [], function (err, data) {
       rst.ljcjje=data[0]["sum"];
        backNode.entity=rst;
        console.log(backNode);
        cb(null,backNode);
    });

};

var indexControl = new IndexControl();
module.exports = indexControl;

