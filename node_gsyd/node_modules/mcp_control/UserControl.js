/**
 * Created by shiqm on 16-4-8.
 */
'use strict';
var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;

var cons = require('mcp_constants');
var userType = cons.userType;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var adminService = service.adminService;

var util = require('mcp_util');
var objectUtil = util.objectUtil;

var UserControl = function () {
};


UserControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  UC01 注册
 */

UserControl.prototype.checkUC01 = function (headNode, bodyNode, cb) {
    if (objectUtil.isNull(bodyNode.username)) {
        cb(ec.E3070);
        return;
    }
    if (objectUtil.isNull(bodyNode.password)) {
        cb(ec.E3070);
        return;
    }
    if (objectUtil.isNull(bodyNode.mobile)) {
        cb(ec.E3070);
        return;
    }
    cb(null);
};

UserControl.prototype.handleUC01 = function (headNode, bodyNode, cb) {
    var table = dc.main.get("user");
    bodyNode.status = 1;
    bodyNode.id = digestUtil.createUUID();
    bodyNode.permission = 0;
    bodyNode.password = digestUtil.sha1(bodyNode.password);
    bodyNode.createTime = new Date();
    table.save(bodyNode, [], function (err) {
        if (err) {
            log.error(bodyNode.username + '保存信息出错');
            cb(ec.E9999);
        } else {
            //创建账户
            var accountTab = dc.main.get("account");
            var cond = {
                id: digestUtil.createUUID(),
                user_id: bodyNode.id,
                money: 0,
                frozen_money: 0,
                create_time: new Date(),
                update_time: new Date()
            };
            accountTab.save(cond, [], function (err) {
                if(err){
                    log.error(bodyNode.username + '创建账户出错');
                    cb(ec.E9999);
                }else{
                    cb(null);
                }
            });

        }
    });
};



/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  UC02 登录
 */

UserControl.prototype.checkUC02 = function (headNode, bodyNode, cb) {
    if (bodyNode.username == null || bodyNode.username == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.password == null || bodyNode.password == undefined) {
        cb(ec.E3070);
        return;
    }
    cb(null);
};

UserControl.prototype.handleUC02 = function (headNode, bodyNode, cb) {
    adminService.userLogin(bodyNode.username, bodyNode.password, function (err, tag) {
        if (err) {
            cb(ec.E9999);
        } else {
            var backNode = {};
            backNode.tag = tag;
            cb(null, backNode);
        }
    });
};



var userControl = new UserControl();
module.exports = userControl;