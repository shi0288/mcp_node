/**
 * Created by liujun on 2016/7/20.
 */
var async = require('async');
var moment= require('moment');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;
var util = require('mcp_util');
var creditorDateUtil = util.creditorDateUtil;

var cons = require('mcp_constants');
var userType = cons.userType;
var loanStatus = cons.loanStatus;
var investStatus = cons.investStatus;
var taskCons = cons.taskCons;
var userBillCons = cons.userBillCons;
var calCons = cons.calculateCons;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;
var taskService = service.taskService;
var userBillService = service.userBillService;
var calculateService = service.calculateService;
var creditorCalculateService = service.creditorCalculateService;
var creditorService = service.creditorService;
var checkService = service.checkService;

var CreditorControl = function () {
};

CreditorControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @type {CreditorControl}
 * @Description  CR01 债权转让
 */
CreditorControl.prototype.checkCR01 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //验证债权转让的条件
        function (cb) {
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: bodyNode.loan_id}, {}, [], function (err , loanObj) {
                cb(err , loanObj);
            });
        },
        function (loanObj, cb) {
            creditorService.getCurRepayDay(loanObj.id, function (err, data) {
                var curRepayDay = data.repay_day.Format("yyyy-MM-dd");
                var curDay = new Date().Format("yyyy-MM-dd");
                var preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);
                var money = bodyNode.total_price;
                console.log("转让本金为：" + money);
                var interest = data.interest;
                if (err) {
                    cb(true);
                } else {
                    cb(null, loanObj, curRepayDay, curDay, preRepayDay, money, interest);
                }
            });
            //cb(null, loanObj);
        },
        function (loanObj, curRepayDay, curDay, preRepayDay, money, interest, cb) {
            var repay_typeTab = dc.main.get('repay_type');
            repay_typeTab.findOne({id: loanObj.repay_type}, {}, [], function (err, repay_typeObj) {
                switch (repay_typeObj.type) {
                    //等额本息
                    case 'debx':
                        var creditorValue = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, interest);
                        var actualRate = creditorCalculateService.creditorActualRate();
                        actualRate = 9.70;
                        console.log("债权价值为：" + creditorValue);
                        console.log("实际利率为：" + actualRate);
                        bodyNode.creditor_value = creditorValue;
                        bodyNode.actual_rate = actualRate;
                        cb(err);
                        break;
                    //先息后本
                    case 'ayfx':

                        break;
                    default:
                }
            })
        },
        //生成id号
        function (cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, id);
                }
            });
        },
        function (id, cb) {
            console.log("id为：" + id);
            bodyNode.id = id;
            bodyNode.status = 0;
            bodyNode.create_time = dateUtil.getCurTime();

            var loan = dc.main.get('creditor_loan');
            loan.save(bodyNode, [], function (err) {
                if (err) {
                    cb(ec.E9050);
                } else {
                    cb(null);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @type {CreditorControl}
 * @Description  CR02 购买债权
 */
CreditorControl.prototype.checkCR02 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR02 = function (headNode, bodyNode, cb) {
    var connection = dc.main.getConn();
    var tasks = [
        function (cb) {
            var creditor_loanTab = dc.main.get('creditor_loan');
            creditor_loanTab.findOne({id: bodyNode.creditor_loan_id}, {}, [], function (err , creditorLoanObj) {
                cb(err , creditorLoanObj);
            });
        },
        //生成id号
        function (creditorLoanObj, cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err , creditorLoanObj, id);
                }
            });
        },
        function (creditorLoanObj, id, cb) {
            console.log("creditor_invest_id为：" + id);
            console.log("实际应付金额：" + bodyNode.accept_money);
            console.log("受让金额：" + bodyNode.money);
            console.log("更新金额：" + bodyNode.sur_money);
            var accept_money = bodyNode.accept_money;
            accept_money = 121.00;
            var money = bodyNode.money;
            var userID = bodyNode.user_id;
            var sur_money = bodyNode.sur_money;
            var status = 1;
            var create_time = dateUtil.getCurTime();
            var creditor_loan_id = bodyNode.creditor_loan_id;
            var user_id = bodyNode.user_id;
            creditorService.buyTran(money, userID,accept_money,sur_money,id,status,create_time,creditor_loan_id,user_id, function (err, data) {
                if(err) {
                    cb(err);
                }else {
                    console.log("执行操作成功");
                }
            });
        }
    ];
    async.waterfall(tasks, function (err, results) {
        if(err) {
            console.log(err);
        }
    });
};

var creditorControl = new CreditorControl();
module.exports = creditorControl;