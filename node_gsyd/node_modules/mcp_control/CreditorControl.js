/**
 * Created by liujun on 2016/7/20.
 */
var async = require('async');
var moment= require('moment');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;
var util = require('mcp_util');
var creditorDateUtil = util.creditorDateUtil;

var cons = require('mcp_constants');
var userType = cons.userType;
var loanStatus = cons.loanStatus;
var investStatus = cons.investStatus;
var taskCons = cons.taskCons;
var userBillCons = cons.userBillCons;
var calCons = cons.calculateCons;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var util = require('mcp_util');
var dateMathUtil = util.dateMathUtil;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;
var taskService = service.taskService;
var userBillService = service.userBillService;
var calculateService = service.calculateService;
var creditorCalculateService = service.creditorCalculateService;
var checkService = service.checkService;

var zq = require('mcp_zq');
var creditorService = zq.creditorService;

var CreditorControl = function () {
};

CreditorControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @type {CreditorControl}
 * @Description  CR01 债权转让
 */
CreditorControl.prototype.checkCR01 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //验证债权转让的条件
        function (cb) {
            var creType = 0;
            //查看同一时间的债权转让条数
            creditorService.getTotalInvestTotal(bodyNode.invest_id, function (err, data) {
                if (data == null) {
                    cb(ec.E9090);
                }else if (data == 0) {
                    var investTab = dc.main.get('invest');
                    investTab.findOne({id: bodyNode.invest_id}, {}, [], function (err, investObj) {
                        if (investObj != null){
                            cb(err , investObj, null, creType);
                        } else {
                            creType = 1;
                            //处理多次债权转让
                            var creditor_investTab = dc.main.get('creditor_invest');
                            creditor_investTab.findOne({id:bodyNode.invest_id}, {}, [], function (err, creditor_investObj) {
                                if(creditor_investObj != null){
                                    cb(err , investObj, creditor_investObj, creType);
                                }else {
                                    cb(true);
                                }
                            });
                        }
                    });
                }else {
                    cb(ec.E9090);
                }
            });
        },
        function (investObj, creditor_investObj, creType, cb) {
            var mayTranMoney = null;
                if (creType == 0) {
                    creditorService.getTotalInvestTran(investObj.id, null, creType, function (err, data) {
                        if (data == null) {
                            data = 0.00;
                        }
                        mayTranMoney = investObj.money - data;
                        if (bodyNode.total_price > mayTranMoney) {
                            //本次不能转让
                            cb(ec.E9090);
                        }else {
                            var loanTab = dc.main.get('loan');
                            loanTab.findOne({id: investObj.loan_id}, {}, [], function (err , loanObj) {
                                cb(err , loanObj, investObj, creditor_investObj, creType);
                            });
                        }
                    });
                } else if (creType == 1) {
                    creditorService.getTotalInvestTran(null, creditor_investObj.id, creType, function (err, data) {
                        if (data == null) {
                            data = 0.00;
                        }
                        mayTranMoney = creditor_investObj.money - data;
                        if (bodyNode.total_price > mayTranMoney) {
                            //本次不能转让
                            cb(ec.E9090);
                        }else {
                            var loanTab = dc.main.get('loan');
                            loanTab.findOne({id: creditor_investObj.loan_id}, {}, [], function (err , loanObj) {
                                cb(err , loanObj, investObj, creditor_investObj, creType);
                            });
                        }
                    });
                }else {
                    cb(ec.E9999);
                }
        },
        function (loanObj, investObj, creditor_investObj, creType, cb) {
            var creditor_configTab = dc.main.get('creditor_config');
            creditor_configTab.findOne({id: "f207104d8dbe4f7488cd712cc672948b"}, {}, [], function (err, creditor_configObj) {
                if (err) {
                    cb(ec.E9090);
                }else {
                    //验证规则
                    creditorService.getAyfxRepayDay(loanObj.id, function (err, data) {
                        var lastRepayDay = data;
                        if (data == null) {
                            cb(ec.E9090);
                        }else {
                            //业务处理开始
                            cb(err , loanObj, creditor_configObj, investObj, creditor_investObj, creType, lastRepayDay);
                        }
                    });
                    //cb(err , loanObj, creditor_configObj, investObj, creditor_investObj, creType);
                }

            });
        },
        function (loanObj, creditor_configObj, investObj, creditor_investObj, creType, lastRepayDay, cb) {
            if (creType == 1) {
                bodyNode.creditor_invest_id = bodyNode.invest_id;
                bodyNode.invest_id = null;
                //多次债权转让处理
                creditorService.getCurRepayDay(loanObj.id, function (err, data) {
                    var curRepayDay = data.repay_day.Format("yyyy-MM-dd");
                    var curDay = new Date().Format("yyyy-MM-dd");
                    var investDay = creditor_investObj.create_time.Format("yyyy-MM-dd");
                    var inter_day = dateMathUtil.daysBetween(curDay, investDay);
                    var creDayCurRepay = dateMathUtil.daysBetween(curDay, curRepayDay);
                    var minMoney = bodyNode.total_price;
                    var discRange = bodyNode.disc_rate;
                    var preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);
                    var money = bodyNode.total_price;
                    var period = data.period;
                    var interest = data.interest;
                    if (err) {
                        cb(true);
                    }else {
                        creditorService.getMoreLastCreditor(creditor_investObj.id, function (err, data) {
                            if (err) {
                                cb(true);
                            }else {
                                if(data != null) {
                                    var lastCreditorDay = data.create_time.Format("yyyy-MM-dd");
                                    var preCreditorDay = dateMathUtil.daysBetween(curDay, lastCreditorDay);
                                }
                                creditorService.getSurCount(loanObj.id, function (err,data) {
                                    var surCount = data.surCount;
                                    if (err) {
                                        cb(true);
                                    }else {
                                        creditorService.getSurMoney(loanObj.id, function (err,data) {
                                            var surMoney = data;
                                            if (err) {
                                                cb(true);
                                            }else {
                                                cb(null, loanObj, curRepayDay, curDay, preRepayDay, money, interest, period, creditor_configObj, surCount, surMoney, lastRepayDay);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            } else {
                creditorService.getCurRepayDay(loanObj.id, function (err, data) {
                    var preRepayDay = new Date();
                    var curRepayDay = data.repay_day.Format("yyyy-MM-dd");
                    var curDay = new Date().Format("yyyy-MM-dd");
                    //效验规则1
                    var investDay = investObj.create_time.Format("yyyy-MM-dd");
                    var inter_day = dateMathUtil.daysBetween(curDay, investDay);
                    //效验规则3
                    var creDayCurRepay = dateMathUtil.daysBetween(curDay, curRepayDay);
                    //效验规则4
                    var minMoney = bodyNode.total_price;
                    //效验规则5
                    var discRange = bodyNode.disc_rate;
                    if (data.period == 1) {
                        preRepayDay = loanObj.accrue_time.Format("yyyy-MM-dd");
                    }else {
                        preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);
                    }
                    var money = bodyNode.total_price;
                    var period = data.period;
                    var interest = data.interest;
                    if (err) {
                        cb(true);
                    } else {
                        //效验规则2
                        creditorService.getLastCreditor(investObj.id, function (err, data) {
                            if (err) {
                                cb(true);
                            }else {
                                if(data != null) {
                                    var lastCreditorDay = data.create_time.Format("yyyy-MM-dd");
                                    var preCreditorDay = dateMathUtil.daysBetween(curDay, lastCreditorDay);
                                }
                                //计算剩余总数
                                creditorService.getSurCount(loanObj.id, function (err,data) {
                                    var surCount = data.surCount;
                                    if (err) {
                                        cb(true);
                                    }else {
                                        creditorService.getSurMoney(loanObj.id, function (err,data) {
                                            var surMoney = data;
                                            if (err) {
                                                cb(true);
                                            }else {
                                                cb(null, loanObj, curRepayDay, curDay, preRepayDay, money, interest, period, creditor_configObj, surCount, surMoney, lastRepayDay);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
                //cb(null, loanObj);
            }
        },
        function (loanObj, curRepayDay, curDay, preRepayDay, money, interest, period, creditor_configObj, surCount, surMoney, lastRepayDay, cb) {
            var repay_typeTab = dc.main.get('repay_type');
            repay_typeTab.findOne({id: loanObj.repay_type}, {}, [], function (err, repay_typeObj) {
                switch (repay_typeObj.type) {
                    //等额本息
                    case 'debx':
                        var repayMonth = calculateService.deMonthSumCal(loanObj.rate/100, loanObj.money, loanObj.deadline);
                        var creditorValue = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, interest);
                        //债权价值 - 折让金 = 实际应付
                        var actualMoney = creditorValue - money * bodyNode.disc_rate / 100 ;
                        var actualRate = creditorCalculateService.creditorActualRate(loanObj.money, loanObj.rate/100,repayMonth,period,money,actualMoney,surMoney)*100;
                        bodyNode.actual_money_part = actualMoney / money;
                        bodyNode.creditor_value = creditorValue;
                        bodyNode.actual_rate = actualRate;
                        bodyNode.loan_id = loanObj.id;
                        bodyNode.creditor_type = repay_typeObj.type;
                        var addDay = creditor_configObj.period;
                        //债权转让的时间
                        bodyNode.create_time = dateUtil.getCurTime();
                        var abc = new Date();
                        var abc1 = new Date();
                        bodyNode.start_time = abc;
                        bodyNode.end_time = dateMathUtil.daysAdd("d ", addDay, abc1);
                        cb(err);
                        break;
                    //先息后本
                    case 'ayfx':
                        //验证规则
                        var ayfxDays =  dateMathUtil.daysBetween(curDay, lastRepayDay);
                        var creditorValue = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, interest);
                        bodyNode.creditor_value = creditorValue;
                        var actualMoney = creditorValue - money * bodyNode.disc_rate / 100 ;
                        bodyNode.actual_money_part = actualMoney / money;
                        var monthInteres = calculateService.monthCal(loanObj.rate , loanObj.money);
                        var actualRate = creditorCalculateService.creditorAyfxActualRate(monthInteres,bodyNode.total_price, loanObj.money, actualMoney);
                        bodyNode.actual_rate = actualRate;
                        bodyNode.loan_id = loanObj.id;
                        bodyNode.creditor_type = repay_typeObj.type;
                        var addDay = creditor_configObj.period;
                        //债权转让的时间
                        bodyNode.create_time = dateUtil.getCurTime();
                        var abc = new Date();
                        var abc1 = new Date();
                        bodyNode.start_time = abc;
                        bodyNode.end_time = dateMathUtil.daysAdd("d ", addDay, abc1);
                        cb(err);
                        break;
                    //一次性还本付息
                    case 'ycxh':
                        //验证规则
                        var ycxhDays =  dateMathUtil.daysBetween(curDay, curRepayDay);
                        var ycxhAccurDate = loanObj.accrue_time.Format("yyyy-MM-dd");
                        var creditorValue = creditorCalculateService.creditorValueYcxh(curRepayDay, curDay, ycxhAccurDate, money, interest);
                        bodyNode.creditor_value = creditorValue;
                        var actualMoney = creditorValue - money * bodyNode.disc_rate / 100 ;
                        var actualRate = creditorCalculateService.creditorYcxhActualRate(interest, loanObj.deadline, money, loanObj.money, actualMoney);
                        bodyNode.actual_rate = actualRate;
                        bodyNode.loan_id = loanObj.id;
                        bodyNode.creditor_type = repay_typeObj.type;
                        var addDay = creditor_configObj.period;
                        //债权转让的时间
                        bodyNode.create_time = dateUtil.getCurTime();
                        var abc = new Date();
                        var abc1 = new Date();
                        bodyNode.start_time = abc;
                        bodyNode.end_time = dateMathUtil.daysAdd("d ", addDay, abc1);
                        cb(err);
                        break;
                    default:
                }
            })
        },
        //生成id号
        function (cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, id);
                }
            });
        },
        function (id, cb) {
            bodyNode.id = id;
            bodyNode.status = 0;
            bodyNode.disc_price = bodyNode.total_price * bodyNode.disc_rate / 100;
            var loan = dc.main.get('creditor_loan');
            loan.save(bodyNode, [], function (err) {
                if (err) {
                    cb(ec.E9050);
                } else {
                    cb(null);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CR03 转让列表
 */
CreditorControl.prototype.checkCR03 = function (headNode, bodyNode, cb) {
    /*//检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.fields, function (err) {
                checkCb(err);
            });
        },
        //第三步检查是否有条件字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第四步检查是否有排序的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.sort, function (err) {
                checkCb(err);
            });
        }
    ], function (err) {
        cb(err);
    });*/
    cb(null);
};

CreditorControl.prototype.handleCR03 = function (headNode, bodyNode, cb) {
    //筛选条件判断
    var status = bodyNode.cond.status;
    var deadline = bodyNode.cond.deadline;
    var rate = bodyNode.cond.rate;
    var page = bodyNode.cond.page;
    var size = bodyNode.cond.size;
    var sql = "SELECT l.name, l.rate, c.total_price FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id " +
        "WHERE c.status = 0 ORDER BY c.create_time DESC LIMIT 3";
    var sql2 = "SELECT l.id, l.name, l.rate, c.total_price, (to_days(rr.repay_day) - to_days(now())) days, c.creditor_type,rr.repay_day, " +
        "(FLOOR(c.tran_price/c.total_price*100))progess " +
        "FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id LEFT JOIN(SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM " +
        "(SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id ORDER BY z.period DESC) rr ON l.id = rr.loan_id WHERE c.status = 0 " +
        "ORDER BY c.create_time DESC";
    var sql3 = "SELECT c.id, c.creditor_value_update, (l.id)loan_id, l.name, l.rate, c.total_price, c.status, (to_days(rr.repay_day) - to_days(now())) days, c.creditor_type,rr.repay_day, " +
        "(FLOOR(c.tran_price/c.total_price*100))progess " +
        "FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id LEFT JOIN(SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM " +
        "(SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id ORDER BY z.period DESC) rr ON l.id = rr.loan_id WHERE 1=1";
    var sql4 = "SELECT COUNT(0) total FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id LEFT JOIN (SELECT (z.repay_day) repay_day, " +
        "(z.loan_id) loan_id FROM (SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id " +
        "ORDER BY z.period DESC) rr ON l.id = rr.loan_id WHERE 1=1";
    var conn = dc.main.getConn();
    if (status != null && status != undefined && status != '') {
        sql3 += " and c.status =" + status;
        sql4 += " and c.status =" + status;
    }
    if (deadline != null && deadline != undefined && deadline != '') {
        sql3 += " where c.status =" + status;
    }
    if (rate != null && rate != undefined && rate != '') {
        sql3 += " where c.status =" + status;
    }
    sql3 += " ORDER BY c.status ";
    if (page != null && page != undefined && page != '' && size != null && size != undefined && size != '') {
        sql3 += " limit " + ((page - 1) * size) + "," + size;
    }
    conn.execute(sql4, [], function (err, data) {
        var total = data[0].total;
        if (err) {
            cb(ec.E9090);
        }else {
            var creditorBodyNode = {};
            creditorBodyNode.count = total;
            conn.execute(sql3, [], function (err, data) {
                if (err) {
                    cb(err, null);
                }else {
                    if (data != null) {
                        //转让列表内容
                        creditorBodyNode.rst = data;
                        cb(null, creditorBodyNode);
                    }
                }
            });
        }
    });
};

/**
 *
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CR04 债权详情页
 */
CreditorControl.prototype.checkCR04 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR04 = function (headNode, bodyNode, cb) {
    var creditorID = bodyNode.cond.creditorID;
    var sql = "SELECT c.id, l.name, c.actual_rate, c.creditor_value_update, (to_days(rr.repay_day) - to_days(now())) days, c.total_price, " +
        "c.creditor_type, c.disc_rate, c.disc_price, c.create_time, DATE_FORMAT(c.end_time, '%Y/%m/%d %H:%i:%s')end_time, tt.repay_daycur, rr.repay_day, " +
        "(FLOOR(c.tran_price/c.total_price*100))progess, (c.total_price - c.tran_price)surprice, " +
        "(round((c.creditor_value_update - c.disc_price)/c.total_price, 2))acMoney " +
        "FROM creditor_loan c LEFT JOIN loan l " +
        "ON l.id = c.loan_id LEFT JOIN(SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM (SELECT * FROM loan_repay ORDER BY period DESC) z " +
        "GROUP BY z.loan_id ORDER BY z.period DESC) rr ON l.id = rr.loan_id LEFT JOIN (SELECT (t.repay_day)repay_daycur, " +
        "(t.loan_id)loan_id FROM loan_repay t WHERE t.status = 0 GROUP BY t.loan_id ORDER BY period) tt ON rr.loan_id = tt.loan_id WHERE 1=1";
    var conn = dc.main.getConn();
    if (creditorID != null && creditorID != undefined && creditorID != '') {
        sql += " and c.id =" + creditorID;
    }
    conn.execute(sql, [], function (err, data) {
        var creditorDetailBodyNode = {};
        if (err) {
            cb(ec.E9090);
        }else {
            if (data != null) {
                creditorDetailBodyNode.rst = data;
                cb(null, creditorDetailBodyNode);
            }
        }
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @type {CreditorControl}
 * @Description  CR02 购买债权
 */
CreditorControl.prototype.checkCR02 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR02 = function (headNode, bodyNode, cb) {
    var tasks = [
        function (cb) {
            var creditor_loanTab = dc.main.get('creditor_loan');
            creditor_loanTab.findOne({id: bodyNode.creditor_loan_id}, {}, [], function (err , creditorLoanObj) {
                var compareMoney = creditorLoanObj.total_price - creditorLoanObj.tran_price;
                if (bodyNode.money > compareMoney) {
                    cb(ec.E9090);
                }else {
                    var accountTab = dc.main.get('account');
                    accountTab.findOne({user_id: bodyNode.user_id}, {}, [], function (err, accountObj) {
                        if (accountObj.money >= bodyNode.money) {
                            cb(err , creditorLoanObj);
                        }else {
                            cb(ec.E9090);
                        }
                    });
                }
            });
        },
        function (creditorLoanObj, cb) {
            creditorService.getCurRepayDay(creditorLoanObj.loan_id, function (err, loanRepayObj) {
                if (err) {
                    cb(true);
                } else {
                    cb(err, creditorLoanObj, loanRepayObj);
                }
            });
        },
        function (creditorLoanObj, loanRepayObj, cb) {
            var investTab = dc.main.get('invest');
            var creditor_investTab = dc.main.get('creditor_invest');
            investTab.findOne({id: creditorLoanObj.invest_id}, {}, [], function (err, investObj) {
                if (investObj != null) {
                    cb(err, creditorLoanObj, loanRepayObj, investObj);
                }else {
                    creditor_investTab.findOne({id: creditorLoanObj.creditor_invest_id}, {}, [], function (err, investObj) {
                        cb(err, creditorLoanObj, loanRepayObj, investObj);
                    });
                }
            });
        },
        //生成id号
        function (creditorLoanObj, loanRepayObj, investObj, cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err , creditorLoanObj, id, loanRepayObj, investObj);
                }
            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj, cb) {
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: creditorLoanObj.loan_id}, {}, [], function (err, loanObj) {
                cb(err , creditorLoanObj, id, loanRepayObj, investObj, loanObj);
            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj,loanObj, cb) {
            var curRepayDay = loanRepayObj.repay_day.Format("yyyy-MM-dd");
            var curDay = new Date().Format("yyyy-MM-dd");
            var preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);

            var creditor_configTab = dc.main.get('creditor_config');
            creditor_configTab.findOne({id: "f207104d8dbe4f7488cd712cc672948b"}, {}, [], function (err, creditor_configObj) {
                var creditor_mange_money = creditor_configObj.creditor_mange_money;
                var cre_inv_suc_man = bodyNode.money * creditor_mange_money / 100;
                if (err) {
                    cb(ec.E9090);
                }else {
                    cb(null, creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man);
                }

            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man, cb) {
            creditorService.getSurMoney(loanObj.id, function (err,data) {
                var surMoney = data;
                if (err) {
                    cb(ec.E9090);
                }else {
                    cb(null, creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man,surMoney);
                }
            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man,surMoney, cb) {
            var creditor_investTab = dc.main.get('creditor_invest');
            //var accept_money = bodyNode.accept_money;
            //var accept_money = bodyNode.money * creditorLoanObj.actual_money_part;
            var accept_money = (creditorLoanObj.creditor_value - creditorLoanObj.disc_price)*bodyNode.money/creditorLoanObj.total_price;
            var money = bodyNode.money;
            var userID = bodyNode.user_id;
            var status = 1;
            var create_time = dateUtil.getCurTime();
            var creditor_loan_id = bodyNode.creditor_loan_id;
            //债权投资的债权价值
            var creditorValueInvest = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, loanRepayObj.interest);
            //var accept_money = (creditorValueInvest - creditorLoanObj.disc_price) * bodyNode.money/creditorLoanObj.total_price;
            /*creditorService.buyTran(money, userID,accept_money,id,status,create_time,creditor_loan_id,loanRepayObj,creditorLoanObj,investObj,loanObj,curRepayDay,curDay,preRepayDay,creditorValueInvest,cre_inv_suc_man,surMoney, function (err, data) {
                if(err) {
                    cb(ec.E9050);
                }else {
                    cb(null);
                }
            });*/
            bodyNode.id = id; bodyNode.loan_id = loanObj.id; bodyNode.money = money; bodyNode.accept_money = accept_money;
            bodyNode.status = status; bodyNode.create_time = create_time; bodyNode.user_id = userID;
            bodyNode.creditor_loan_id = creditor_loan_id; bodyNode.creditor_value = creditorValueInvest;
            bodyNode.creditor_man_fee = cre_inv_suc_man;
            creditor_investTab.save(bodyNode, [], function (err) {
                if (err) {
                    cb(ec.E9090);
                }else {
                    var backNode = {};
                    backNode.id = id;
                    cb(null, backNode);
                }
            });
        }
    ];
    async.waterfall(tasks, function (err, backNode) {
        cb(err, backNode);
    });
};

var creditorControl = new CreditorControl();
module.exports = creditorControl;