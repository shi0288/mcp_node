/**
 * Created by liujun on 2016/7/20.
 */
var async = require('async');
var moment= require('moment');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;
var util = require('mcp_util');
var creditorDateUtil = util.creditorDateUtil;

var cons = require('mcp_constants');
var userType = cons.userType;
var loanStatus = cons.loanStatus;
var investStatus = cons.investStatus;
var taskCons = cons.taskCons;
var userBillCons = cons.userBillCons;
var calCons = cons.calculateCons;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var util = require('mcp_util');
var dateMathUtil = util.dateMathUtil;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;
var taskService = service.taskService;
var userBillService = service.userBillService;
var calculateService = service.calculateService;
var creditorCalculateService = service.creditorCalculateService;
var checkService = service.checkService;

var zq = require('mcp_zq');
var creditorService = zq.creditorService;

var CreditorControl = function () {
};

CreditorControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @type {CreditorControl}
 * @Description  CR01 债权转让
 */
CreditorControl.prototype.checkCR01 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //验证债权转让的条件
        function (cb) {
            var creType = 0;
            //查看同一时间的债权转让条数
            creditorService.getTotalInvestTotal(bodyNode.invest_id, function (err, data) {
                console.log("同一时间的债权转让的记录：" + data);
                if (data == null) {
                    cb(ec.E9090);
                }else if (data == 0) {
                    var investTab = dc.main.get('invest');
                    investTab.findOne({id: bodyNode.invest_id}, {}, [], function (err, investObj) {
                        console.log("查出的已投资的记录为：" + investObj);
                        if (investObj != null){
                            cb(err , investObj, null, creType);
                        } else {
                            creType = 1;
                            //处理多次债权转让
                            var creditor_investTab = dc.main.get('creditor_invest');
                            creditor_investTab.findOne({id:bodyNode.invest_id}, {}, [], function (err, creditor_investObj) {
                                if(creditor_investObj != null){
                                    cb(err , investObj, creditor_investObj, creType);
                                }else {
                                    console.log("债权转让的投资记录异常");
                                    cb(ec.E9090);
                                }
                            });
                        }
                    });
                }else {
                    cb(ec.E9090);
                }
            });
        },
        function (investObj, creditor_investObj, creType, cb) {
            var mayTranMoney = null;
                if (creType == 0) {
                    creditorService.getTotalInvestTran(investObj.id, null, creType, function (err, data) {
                        console.log("返回的投资记录的成功转让总额为：" + data);
                        if (data == null) {
                            data = 0.00;
                        }
                        mayTranMoney = investObj.money - data;
                        console.log("本次投资记录可以转让的金额为：" + mayTranMoney);
                        if (bodyNode.total_price > mayTranMoney) {
                            //本次不能转让
                            console.log("本次的投资记录的转让余额不足");
                            cb(ec.E9090);
                        }else {
                            var loanTab = dc.main.get('loan');
                            loanTab.findOne({id: investObj.loan_id}, {}, [], function (err , loanObj) {
                                cb(err , loanObj, investObj, creditor_investObj, creType);
                            });
                        }
                    });
                } else if (creType == 1) {
                    creditorService.getTotalInvestTran(null, creditor_investObj.id, creType, function (err, data) {
                        console.log("返回的投资记录的成功转让总额为：" + data);
                        if (data == null) {
                            data = 0.00;
                        }
                        mayTranMoney = creditor_investObj.money - data;
                        console.log("本次投资记录可以转让的金额为：" + mayTranMoney);
                        if (bodyNode.total_price > mayTranMoney) {
                            //本次不能转让
                            console.log("本次的投资记录的转让余额不足");
                            cb(ec.E9090);
                        }else {
                            var loanTab = dc.main.get('loan');
                            loanTab.findOne({id: creditor_investObj.loan_id}, {}, [], function (err , loanObj) {
                                cb(err , loanObj, investObj, creditor_investObj, creType);
                            });
                        }
                    });
                }else {
                    //console.log("系统不进行处理");
                    cb(ec.E9999);
                }
        },
        function (loanObj, investObj, creditor_investObj, creType, cb) {
            var creditor_configTab = dc.main.get('creditor_config');
            creditor_configTab.findOne({id: "f207104d8dbe4f7488cd712cc672948b"}, {}, [], function (err, creditor_configObj) {
                if (err) {
                    console.log(err);
                }else {
                    //验证规则
                    creditorService.getAyfxRepayDay(loanObj.id, function (err, data) {
                        console.log("先息后本的还款计划的最后一期还款时间为：" + data);
                        var lastRepayDay = data;
                        if (data == null) {
                            cb(ec.E9090);
                        }else {
                            //业务处理开始
                            cb(err , loanObj, creditor_configObj, investObj, creditor_investObj, creType, lastRepayDay);
                        }
                    });
                    //cb(err , loanObj, creditor_configObj, investObj, creditor_investObj, creType);
                }

            });
        },
        function (loanObj, creditor_configObj, investObj, creditor_investObj, creType, lastRepayDay, cb) {
            if (creType == 1) {
                //console.log("多次债权转让处理开始");
                bodyNode.creditor_invest_id = bodyNode.invest_id;
                bodyNode.invest_id = null;
                //多次债权转让处理
                creditorService.getCurRepayDay(loanObj.id, function (err, data) {
                    var curRepayDay = data.repay_day.Format("yyyy-MM-dd");
                    var curDay = new Date().Format("yyyy-MM-dd");

                    var investDay = creditor_investObj.create_time.Format("yyyy-MM-dd");
                    var inter_day = dateMathUtil.daysBetween(curDay, investDay);
                    //console.log("持有债权的期限为：" + inter_day + "天");
                    if (inter_day < creditor_configObj.buy_loan_days) {
                        cb(ec.E9090);
                    }
                    var creDayCurRepay = dateMathUtil.daysBetween(curDay, curRepayDay);
                    //console.log("转让申请距当期的还款日时间为：" + creDayCurRepay);
                    if (creDayCurRepay < creditor_configObj.tran_apply_cur_repay) {
                        cb(ec.E9090);
                    }
                    var minMoney = bodyNode.total_price;
                    //console.log("债权转让的最低金额为：" + minMoney);
                    if (minMoney < creditor_configObj.creditor_min_money) {
                        cb(ec.E9090);
                    }
                    var discRange = bodyNode.disc_rate;
                    console.log("债权的折价率为：" + discRange);
                    var preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);
                    var money = bodyNode.total_price;
                    var period = data.period;
                    //console.log("转让本金为：" + money);
                    var interest = data.interest;
                    if (err) {
                        cb(true);
                    }else {
                        creditorService.getMoreLastCreditor(creditor_investObj.id, function (err, data) {
                            if (err) {
                                cb(true);
                            }else {
                                //console.log("多次债权的返回的值为：" + data);
                                if(data != null) {
                                    var lastCreditorDay = data.create_time.Format("yyyy-MM-dd");
                                    //console.log("多次上笔的债权完成时间为：" + lastCreditorDay);
                                    var preCreditorDay = dateMathUtil.daysBetween(curDay, lastCreditorDay);
                                    //console.log("进行债权的转让时间间隔的天数为2：" + preCreditorDay);
                                    if (preCreditorDay <= creditor_configObj.interva) {
                                        cb(ec.E9090);
                                    }
                                }
                                creditorService.getSurCount(loanObj.id, function (err,data) {
                                    var surCount = data.surCount;
                                    //console.log("还款方式相应的剩余期数为：" + surCount);
                                    if (err) {
                                        cb(true);
                                    }else {
                                        creditorService.getSurMoney(loanObj.id, function (err,data) {
                                            //console.log("剩余本金为：" + data);
                                            var surMoney = data;
                                            if (err) {
                                                console.log(err);
                                            }else {
                                                cb(null, loanObj, curRepayDay, curDay, preRepayDay, money, interest, period, creditor_configObj, surCount, surMoney, lastRepayDay);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            } else {
                creditorService.getCurRepayDay(loanObj.id, function (err, data) {
                    var preRepayDay = new Date();
                    //var curRepayDay = data.repay_day.Format("yyyy-MM-dd");
                    var curRepayDay = moment(data.repay_day).format('YYYY-MM-DD');
                    //var curDay = new Date().Format("yyyy-MM-dd");
                    var curDay = moment(new Date()).format('YYYY-MM-DD');
                    //console.log("*******************基本效验规则开始*************************");
                    //效验规则1
                    //var investDay = investObj.create_time.Format("yyyy-MM-dd");
                    var investDay = moment(investObj.create_time).format('YYYY-MM-DD');
                    var inter_day = dateMathUtil.daysBetween(curDay, investDay);
                    //console.log("持有债权的期限为：" + inter_day + "天");
                    if (inter_day < creditor_configObj.buy_loan_days) {
                        cb(ec.E9090);
                    }
                    //效验规则3
                    var creDayCurRepay = dateMathUtil.daysBetween(curDay, curRepayDay);
                    //console.log("转让申请距当期的还款日时间为：" + creDayCurRepay);
                    if (creDayCurRepay < creditor_configObj.tran_apply_cur_repay) {
                        cb(ec.E9090);
                    }
                    //效验规则4
                    var minMoney = bodyNode.total_price;
                    //console.log("债权转让的最低金额为：" + minMoney);
                    if (minMoney < creditor_configObj.creditor_min_money) {
                        cb(ec.E9090);
                    }
                    //效验规则5
                    var discRange = bodyNode.disc_rate;
                    console.log("债权的折价率为：" + discRange);
                    //console.log("*******************基本效验规则结束*************************");
                    if (data.period == 1) {
                        //console.log("标的第一期开始债转");
                        //preRepayDay = loanObj.accrue_time.Format("yyyy-MM-dd");
                        preRepayDay = moment(loanObj.accrue_time).format('YYYY-MM-DD');
                    }else {
                        preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);
                    }
                    var money = bodyNode.total_price;
                    var period = data.period;
                    //console.log("转让债权本金为：" + money);
                    var interest = data.interest;
                    if (err) {
                        cb(true);
                    } else {
                        //效验规则2
                        creditorService.getLastCreditor(investObj.id, function (err, data) {
                            if (err) {
                                cb(true);
                            }else {
                                //console.log("返回的值为：" + data);
                                if(data != null) {
                                    //var lastCreditorDay = data.create_time.Format("yyyy-MM-dd");
                                    var lastCreditorDay = moment(data.create_time).format('YYYY-MM-DD');
                                    //console.log("上笔的债权完成时间为：" + lastCreditorDay);
                                    var preCreditorDay = dateMathUtil.daysBetween(curDay, lastCreditorDay);
                                    //console.log("进行债权的转让时间间隔的天数为2：" + preCreditorDay);
                                    if (preCreditorDay <= creditor_configObj.interva) {
                                        cb(ec.E9090);
                                    }
                                }
                                //计算剩余总数
                                creditorService.getSurCount(loanObj.id, function (err,data) {
                                    var surCount = data.surCount;
                                    //console.log("还款方式相应的剩余期数为：" + surCount);
                                    if (err) {
                                        cb(true);
                                    }else {
                                        creditorService.getSurMoney(loanObj.id, function (err,data) {
                                            //console.log("剩余本金为：" + data);
                                            var surMoney = data;
                                            if (err) {
                                                console.log(err);
                                            }else {
                                                cb(null, loanObj, curRepayDay, curDay, preRepayDay, money, interest, period, creditor_configObj, surCount, surMoney, lastRepayDay);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
                //cb(null, loanObj);
            }
        },
        function (loanObj, curRepayDay, curDay, preRepayDay, money, interest, period, creditor_configObj, surCount, surMoney, lastRepayDay, cb) {
            var midleCreditorMoney = bodyNode.total_price/surMoney;
            var repay_typeTab = dc.main.get('repay_type');
            repay_typeTab.findOne({id: loanObj.repay_type}, {}, [], function (err, repay_typeObj) {
                switch (repay_typeObj.type) {
                    //等额本息
                    case 'debx':
                        //console.log("等额本息剩余的总期数为：" + surCount);
                        if (surCount <= creditor_configObj.sur_period_debx) {
                            cb(ec.E9090);
                        }
                        var repayMonth = calculateService.deMonthSumCal(loanObj.rate/100, loanObj.money, loanObj.deadline);
                        console.log("每月的还款额为：--------------------------》" + repayMonth);
                        var creditorValue = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, interest, midleCreditorMoney);
                        //债权价值 - 折让金 = 实际应付
                        var actualMoney = creditorValue - money * bodyNode.disc_rate / 100 ;
                        console.log("剩余本金的金额为：" + surMoney);
                        var actualRate = creditorCalculateService.creditorActualRate(loanObj.money, loanObj.rate/100,repayMonth,period,money,actualMoney,surMoney)*100;
                        console.log("债权价值为：" + creditorValue);
                        console.log("实际利率为：" + actualRate);
                        bodyNode.actual_money_part = actualMoney / money;
                        console.log("实际应付的部分为：" + bodyNode.actual_money_part);
                        bodyNode.creditor_value = creditorValue;
                        bodyNode.actual_rate = actualRate;
                        bodyNode.loan_id = loanObj.id;
                        bodyNode.creditor_type = repay_typeObj.type;
                        var addDay = creditor_configObj.period;
                        console.log("债权的有效期为：" + addDay + "天");
                        //债权转让的时间
                        bodyNode.create_time = dateUtil.getCurTime();
                        var abc = new Date();
                        var abc1 = new Date();
                        bodyNode.start_time = abc;
                        bodyNode.end_time = dateMathUtil.daysAdd("d ", addDay, abc1);
                        cb(err);
                        break;
                    //先息后本
                    case 'ayfx':
                        //验证规则
                        var ayfxDays =  dateMathUtil.daysBetween(curDay, lastRepayDay);
                        //console.log("先息后本的剩余天数为：" + ayfxDays);
                        if (ayfxDays <= creditor_configObj.sur_period_other) {
                            cb(ec.E9090);
                        }
                        var creditorValue = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, interest);
                        bodyNode.creditor_value = creditorValue;
                        var actualMoney = creditorValue - money * bodyNode.disc_rate / 100 ;
                        bodyNode.actual_money_part = actualMoney / money;
                        var monthInteres = calculateService.monthCal(loanObj.rate , loanObj.money);
                        var actualRate = creditorCalculateService.creditorAyfxActualRate(monthInteres,bodyNode.total_price, loanObj.money, actualMoney);
                        console.log("先息后本的实际利率为：" + actualRate);
                        bodyNode.actual_rate = actualRate;
                        bodyNode.loan_id = loanObj.id;
                        bodyNode.creditor_type = repay_typeObj.type;
                        var addDay = creditor_configObj.period;
                        console.log("债权的有效期为：" + addDay + "天");
                        //债权转让的时间
                        bodyNode.create_time = dateUtil.getCurTime();
                        var abc = new Date();
                        var abc1 = new Date();
                        bodyNode.start_time = abc;
                        bodyNode.end_time = dateMathUtil.daysAdd("d ", addDay, abc1);
                        cb(err);
                        break;
                    //一次性还本付息
                    case 'ycxh':
                        //验证规则
                        var ycxhDays =  dateMathUtil.daysBetween(curDay, curRepayDay);
                        //console.log("一次性还本付息的剩余天数为：" + ycxhDays);
                        if (ycxhDays <= creditor_configObj.sur_period_other) {
                            cb(ec.E9090);
                        }
                        var ycxhAccurDate = loanObj.accrue_time.Format("yyyy-MM-dd");
                        //console.log("一次性还本付息的起息日为：" + ycxhAccurDate);
                        var creditorValue = creditorCalculateService.creditorValueYcxh(curRepayDay, curDay, ycxhAccurDate, money, interest, midleCreditorMoney);
                        bodyNode.creditor_value = creditorValue;
                        var actualMoney = creditorValue - money * bodyNode.disc_rate / 100 ;
                        var actualRate = creditorCalculateService.creditorYcxhActualRate(interest, loanObj.deadline, money, loanObj.money, actualMoney);
                        console.log("一次性还本付息的实际利率为：" + actualRate);
                        bodyNode.actual_rate = actualRate;
                        bodyNode.loan_id = loanObj.id;
                        bodyNode.creditor_type = repay_typeObj.type;
                        var addDay = creditor_configObj.period;
                        console.log("债权的有效期为：" + addDay + "天");
                        //债权转让的时间
                        bodyNode.create_time = dateUtil.getCurTime();
                        var abc = new Date();
                        var abc1 = new Date();
                        bodyNode.start_time = abc;
                        bodyNode.end_time = dateMathUtil.daysAdd("d ", addDay, abc1);
                        cb(err);
                        break;
                    default:
                }
            })
        },
        //生成id号
        function (cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, id);
                }
            });
        },
        function (id, cb) {
            console.log("id为：" + id);
            bodyNode.id = id;
            bodyNode.status = 0;
            console.log("creditor_value为：" + bodyNode.creditor_value);
            bodyNode.disc_price = bodyNode.total_price * bodyNode.disc_rate / 100;
            console.log("本次转让的折价金为：" + bodyNode.disc_price);
            var loan = dc.main.get('creditor_loan');
            loan.save(bodyNode, [], function (err) {
                if (err) {
                    cb(ec.E9050);
                } else {
                    cb(null);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CR03 转让列表
 */
CreditorControl.prototype.checkCR03 = function (headNode, bodyNode, cb) {
    /*//检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.fields, function (err) {
                checkCb(err);
            });
        },
        //第三步检查是否有条件字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第四步检查是否有排序的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.sort, function (err) {
                checkCb(err);
            });
        }
    ], function (err) {
        cb(err);
    });*/
    cb(null);
};

CreditorControl.prototype.handleCR03 = function (headNode, bodyNode, cb) {
    var conn = dc.main.getConn();
    //首页的5条记录
    var creIndex = bodyNode.cond.creIndex;
    console.log("-----------**************" + creIndex);
    var creditorBodyNode = {};
    if (creIndex ==1) {
        var sql2 = "SELECT c.id, l.name, l.rate, c.total_price, (to_days(rr.repay_day) - to_days(now())) days, c.creditor_type,rr.repay_day, " +
            "(FLOOR(c.tran_price/c.total_price*100))progess " +
            "FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id LEFT JOIN(SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM " +
            "(SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id ORDER BY z.period DESC) rr ON l.id = rr.loan_id WHERE c.status = 0 " +
            "ORDER BY c.create_time DESC LIMIT 5";
        conn.execute(sql2, [], function (err, data) {
            if (err) {
                cb(err, null);
            }else {
                if (data != null) {
                    //转让列表内容
                    creditorBodyNode.rst = data;
                    cb(null, creditorBodyNode);
                }
            }
        });
    }else {
        //筛选条件判断
        var status = bodyNode.cond.status;
        var deadline = bodyNode.cond.deadline;
        var rate = bodyNode.cond.rate;
        console.log("-------------------" + status + "," + deadline + "," + rate);
        var sortMoney = bodyNode.cond.sortMoney;
        var sortRate = bodyNode.cond.sortRate;
        var sortDeadLine = bodyNode.cond.sortDeadLine;
        console.log("*******************" + sortMoney + "," + sortRate + "," + sortDeadLine);
        //页面大小
        var page = bodyNode.cond.page;
        var size = bodyNode.cond.size;
        var sql = "SELECT l.name, l.rate, c.total_price FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id " +
            "WHERE c.status = 0 ORDER BY c.create_time DESC LIMIT 3";
        var sql3 = "SELECT c.id, c.creditor_value_update, (l.id)loan_id, l.name, l.rate, c.total_price, c.status, (to_days(rr.repay_day) - to_days(now())) days, c.creditor_type,rr.repay_day, " +
            "(FLOOR(c.tran_price/c.total_price*100))progess " +
            "FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id LEFT JOIN(SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM " +
            "(SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id ORDER BY z.period DESC) rr ON l.id = rr.loan_id WHERE 1=1";
        var sql4 = "SELECT COUNT(0) total FROM creditor_loan c LEFT JOIN loan l ON l.id = c.loan_id LEFT JOIN (SELECT (z.repay_day) repay_day, " +
            "(z.loan_id) loan_id FROM (SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id " +
            "ORDER BY z.period DESC) rr ON l.id = rr.loan_id WHERE 1=1";
        if (status != null && status != undefined && status != '') {
            sql3 += " and c.status =" + status;
            sql4 += " and c.status =" + status;
        }
        if (deadline != null && deadline != undefined && deadline != '') {
            sql3 += " and c.status =" + status;
        }
        if (rate != null && rate != undefined && rate != '') {
            sql3 += " and c.status =" + status;
        }
        //sql3 += " ORDER BY ";
        if (sortMoney != null && sortMoney != undefined && sortMoney != '') {
            sql3 += " c.status"
        }
        if (sortRate != null && sortRate != undefined && sortRate != '') {
            sql3 += " c.status"
        }
        if (sortDeadLine != null && sortDeadLine != undefined && sortDeadLine != '') {
            sql3 += " c.status"
        }
        if (page != null && page != undefined && page != '' && size != null && size != undefined && size != '') {
            sql3 += " limit " + ((page - 1) * size) + "," + size;
        }
        console.log("sql语句为----->>>：" + sql4);
        conn.execute(sql4, [], function (err, data) {
            var total = data[0].total;
            console.log("总条数为：" + total);
            if (err) {
                console.log(err);
            }else {
                creditorBodyNode.count = total;
                conn.execute(sql3, [], function (err, data) {
                    if (err) {
                        cb(err, null);
                    }else {
                        if (data != null) {
                            //转让列表内容
                            creditorBodyNode.rst = data;
                            cb(null, creditorBodyNode);
                        }
                    }
                });
            }
        });
    }
};

/**
 *
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CR04 债权详情页
 */
CreditorControl.prototype.checkCR04 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR04 = function (headNode, bodyNode, cb) {
    console.log("债权的详情的ID为：" + bodyNode.cond.creditorID);
    var creditorID = bodyNode.cond.creditorID;
    var sql = "SELECT c.id, l.name, c.actual_rate, c.creditor_value_update, (to_days(rr.repay_day) - to_days(now())) days, c.total_price, " +
        "c.creditor_type, c.disc_rate, c.disc_price, c.create_time, DATE_FORMAT(c.end_time, '%Y/%m/%d %H:%i:%s')end_time, tt.repay_daycur, rr.repay_day, " +
        "(FLOOR(c.tran_price/c.total_price*100))progess, (c.total_price - c.tran_price)surprice, " +
        "(round((c.creditor_value_update - c.disc_price)/c.total_price, 2))acMoney " +
        "FROM creditor_loan c LEFT JOIN loan l " +
        "ON l.id = c.loan_id LEFT JOIN(SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM (SELECT * FROM loan_repay ORDER BY period DESC) z " +
        "GROUP BY z.loan_id ORDER BY z.period DESC) rr ON l.id = rr.loan_id LEFT JOIN (SELECT (t.repay_day)repay_daycur, " +
        "(t.loan_id)loan_id FROM loan_repay t WHERE t.status = 0 GROUP BY t.loan_id ORDER BY period) tt ON rr.loan_id = tt.loan_id WHERE 1=1";
    var conn = dc.main.getConn();
    if (creditorID != null && creditorID != undefined && creditorID != '') {
        sql += " and c.id =" + creditorID;
    }
    conn.execute(sql, [], function (err, data) {
        var creditorDetailBodyNode = {};
        if (err) {
            console.log(err);
        }else {
            if (data != null) {
                creditorDetailBodyNode.rst = data;
                cb(null, creditorDetailBodyNode);
            }
        }
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @type {CreditorControl}
 * @Description  CR02 购买债权
 */
CreditorControl.prototype.checkCR02 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR02 = function (headNode, bodyNode, cb) {
    var tasks = [
        function (cb) {
            var creditor_loanTab = dc.main.get('creditor_loan');
            creditor_loanTab.findOne({id: bodyNode.creditor_loan_id}, {}, [], function (err , creditorLoanObj) {
                var compareMoney = creditorLoanObj.total_price - creditorLoanObj.tran_price;
                console.log("可以转让的金额为：" + compareMoney);
                if (bodyNode.money > compareMoney) {
                    console.log("可转让的金额不足");
                    cb(ec.E9090);
                }else {
                    var accountTab = dc.main.get('account');
                    accountTab.findOne({user_id: bodyNode.user_id}, {}, [], function (err, accountObj) {
                        if (accountObj.money >= bodyNode.money) {
                            cb(err , creditorLoanObj);
                        }else {
                            cb(ec.E9090);
                        }
                    });
                }
            });
        },
        function (creditorLoanObj, cb) {
            creditorService.getCurRepayDay(creditorLoanObj.loan_id, function (err, loanRepayObj) {
                if (err) {
                    cb(true);
                } else {
                    cb(err, creditorLoanObj, loanRepayObj);
                }
            });
        },
        function (creditorLoanObj, loanRepayObj, cb) {
            var investTab = dc.main.get('invest');
            var creditor_investTab = dc.main.get('creditor_invest');
            investTab.findOne({id: creditorLoanObj.invest_id}, {}, [], function (err, investObj) {
                console.log("债权的投资记录为：" + investObj);
                if (investObj != null) {
                    cb(err, creditorLoanObj, loanRepayObj, investObj);
                }else {
                    creditor_investTab.findOne({id: creditorLoanObj.creditor_invest_id}, {}, [], function (err, investObj) {
                        cb(err, creditorLoanObj, loanRepayObj, investObj);
                    });
                }
            });
        },
        //生成id号
        function (creditorLoanObj, loanRepayObj, investObj, cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err , creditorLoanObj, id, loanRepayObj, investObj);
                }
            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj, cb) {
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: creditorLoanObj.loan_id}, {}, [], function (err, loanObj) {
                cb(err , creditorLoanObj, id, loanRepayObj, investObj, loanObj);
            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj,loanObj, cb) {
            var curRepayDay = loanRepayObj.repay_day.Format("yyyy-MM-dd");
            var curDay = new Date().Format("yyyy-MM-dd");
            var preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);

            var creditor_configTab = dc.main.get('creditor_config');
            creditor_configTab.findOne({id: "f207104d8dbe4f7488cd712cc672948b"}, {}, [], function (err, creditor_configObj) {
                var creditor_mange_money = creditor_configObj.creditor_mange_money;
                var cre_inv_suc_man = bodyNode.money * creditor_mange_money / 100;
                if (err) {
                    console.log(err);
                }else {
                    cb(null, creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man);
                }

            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man, cb) {
            creditorService.getSurMoney(loanObj.id, function (err,data) {
                console.log("剩余本金为：" + data);
                var surMoney = data;
                if (err) {
                    console.log(err);
                }else {
                    cb(null, creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man,surMoney);
                }
            });
        },
        function (creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man,surMoney, cb) {
            var creditor_investTab = dc.main.get('creditor_invest');
            console.log("creditor_invest_id为：" + id);
            console.log("受让金额：" + bodyNode.money);
            console.log("债权投资成功的平台管理费为：" + cre_inv_suc_man);
            var accurDay = moment(loanObj.accrue_time).format('YYYY-MM-DD');
            //var accept_money = bodyNode.accept_money;
            //var accept_money = bodyNode.money * creditorLoanObj.actual_money_part;
            var accept_money = (creditorLoanObj.creditor_value - creditorLoanObj.disc_price)*bodyNode.money/creditorLoanObj.total_price;
            var money = bodyNode.money;
            var userID = bodyNode.user_id;
            var status = 1;
            var create_time = dateUtil.getCurTime();
            var creditor_loan_id = bodyNode.creditor_loan_id;
            switch (creditorLoanObj.creditor_type) {
                case 'ycxh':
                    var creditorValueInvest = creditorCalculateService.creditorValueYcxh(curRepayDay, curDay, accurDay, money, loanRepayObj.interest);
                    break;
                default:
                    //债权投资的债权价值
                    var creditorValueInvest = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, loanRepayObj.interest);
                    console.log("债权投资的债权价值为：" + creditorValueInvest);
                    break;
            }
            //var accept_money = (creditorValueInvest - creditorLoanObj.disc_price) * bodyNode.money/creditorLoanObj.total_price;
            /*creditorService.buyTran(money, userID,accept_money,id,status,create_time,creditor_loan_id,loanRepayObj,creditorLoanObj,investObj,loanObj,curRepayDay,curDay,preRepayDay,creditorValueInvest,cre_inv_suc_man,surMoney, function (err, data) {
                if(err) {
                    cb(ec.E9050);
                }else {
                    cb(null);
                }
            });*/
            bodyNode.id = id; bodyNode.loan_id = loanObj.id; bodyNode.money = money; bodyNode.accept_money = accept_money;
            bodyNode.status = status; bodyNode.create_time = create_time; bodyNode.user_id = userID;
            bodyNode.creditor_loan_id = creditor_loan_id; bodyNode.creditor_value = creditorValueInvest;
            bodyNode.creditor_man_fee = cre_inv_suc_man;
            creditor_investTab.save(bodyNode, [], function (err) {
                if (err) {
                    cb(ec.E9090);
                }else {
                    var backNode = {};
                    backNode.id = id;
                    cb(null, backNode);
                }
            });
        }
    ];
    async.waterfall(tasks, function (err, backNode) {
        cb(err, backNode);
    });
};

/**
 * @Description  CR05 购买债权确认
 * @param headNode
 * @param bodyNode
 * @param cb
 */
CreditorControl.prototype.checkCR05 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR05 = function (headNode, bodyNode, cb) {
    async.waterfall(function (cb) {
        var creditor_loanTab = dc.main.get('creditor_loan');
            creditor_loanTab.findOne({id: bodyNode.creditor_loan_id}, {}, [], function (err , creditorLoanObj) {
                cb(err , creditorLoanObj);
            });
    },
        function (creditorLoanObj, cb) {
            creditorService.getCurRepayDay(creditorLoanObj.loan_id, function (err, loanRepayObj) {
                if (err) {
                    cb(true);
                } else {
                    cb(err, creditorLoanObj, loanRepayObj);
                }
            });
        },
        function (creditorLoanObj, loanRepayObj, cb) {
            var investTab = dc.main.get('invest');
            var creditor_investTab = dc.main.get('creditor_invest');
            investTab.findOne({id: creditorLoanObj.invest_id}, {}, [], function (err, investObj) {
                console.log("债权的投资记录为：" + investObj);
                if (investObj != null) {
                    cb(err, creditorLoanObj, loanRepayObj, investObj);
                }else {
                    creditor_investTab.findOne({id: creditorLoanObj.creditor_invest_id}, {}, [], function (err, investObj) {
                        cb(err, creditorLoanObj, loanRepayObj, investObj);
                    });
                }
            });
        },
        function (creditorLoanObj, loanRepayObj, investObj, cb) {
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: creditorLoanObj.loan_id}, {}, [], function (err, loanObj) {
                cb(err , creditorLoanObj, loanRepayObj, investObj, loanObj);
            });
        },
        function (creditorLoanObj, loanRepayObj, investObj,loanObj, cb) {
            var curRepayDay = loanRepayObj.repay_day.Format("yyyy-MM-dd");
            var curDay = new Date().Format("yyyy-MM-dd");
            var preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);

            var creditor_configTab = dc.main.get('creditor_config');
            creditor_configTab.findOne({id: "f207104d8dbe4f7488cd712cc672948b"}, {}, [], function (err, creditor_configObj) {
                var creditor_mange_money = creditor_configObj.creditor_mange_money;
                var cre_inv_suc_man = bodyNode.money * creditor_mange_money / 100;
                if (err) {
                    console.log(err);
                }else {
                    cb(null, creditorLoanObj, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man);
                }

            });
        },
        function (creditorLoanObj, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man, cb) {
            creditorService.getSurMoney(loanObj.id, function (err,data) {
                console.log("剩余本金为：" + data);
                var surMoney = data;
                if (err) {
                    console.log(err);
                }else {
                    cb(null, creditorLoanObj, id, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man,surMoney);
                }
            });
        },
        function (creditorLoanObj, loanRepayObj, investObj,loanObj,curRepayDay,curDay,preRepayDay,cre_inv_suc_man,surMoney, cb) {
            creditorService.buyTran(money, userID,accept_money,status,create_time,creditor_loan_id,loanRepayObj,creditorLoanObj,investObj,loanObj,curRepayDay,curDay,preRepayDay,creditorValueInvest,cre_inv_suc_man,surMoney, function (err, data) {
                if(err) {
                    cb(ec.E9050);
                }else {
                    cb(null);
                }
            });
        },
        function (err) {
        cb(err);
    });
};

/**
 * @Description  CR06 个人中心的债权转让
 * @param headNode
 * @param bodyNode
 * @param cb
 */
CreditorControl.prototype.checkCR06 = function (headNode, bodyNode, cb) {
    cb(null);
};

CreditorControl.prototype.handleCR06 = function (headNode, bodyNode, cb) {
    var investCount = 0;
    var userID = bodyNode.cond.userID;
    var page = bodyNode.cond.page;
    var size = bodyNode.cond.size;
    console.log("传递的参数为：" + page + "," + size);
    //债权规则效验的条件
    var curDay = moment(new Date()).format("YYYY-MM-DD");
    var curDay2 = moment(new Date()).format("YYYY-MM-DD HH:mm");
    var buy_loan_days =0;
    var invest_time; var repay_type;var creditor_min_money;var days;var sur_period_other;
    var repay_daycur;var loan_id;var debxCount;var sur_period_debx;var interest;var gap;
    var preRepayDay;var period;var accrue_time;var ycxhAccurDate;var repay_daycur2;
    var tran_apply_cur_repay;
    var sqll;var sqll2;var sqll3;
    //结果集
    var creditorBodyNode = {};var arr = new Array();
    //可转让债权, 可转让总额, 转让中的债权, 债权价值总额, 已转让的债权, 已转让总额, 已认购的债权, 折让金总额
    var sql1 = "SELECT COUNT(0) investCount " +
        "FROM (SELECT i.id, i.loan_id, i.money, i.create_time FROM invest i UNION ALL SELECT ci.id, ci.loan_id, ci.money, ci.create_time " +
        "FROM creditor_invest ci) li LEFT JOIN loan l ON l.id = li.loan_id LEFT JOIN (SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM " +
        "(SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id ORDER BY z.period DESC) rr ON li.loan_id = rr.loan_id " +
        "LEFT JOIN (SELECT (t.repay_day)repay_daycur,(t.period)period,(t.interest)interest,(t.loan_id)loan_id FROM loan_repay t " +
        "WHERE t.status = 0 GROUP BY t.loan_id ORDER BY period) tt " +
        "ON rr.loan_id = tt.loan_id";
    var sql2 = "SELECT * FROM (SELECT COUNT(0) tzCount FROM creditor_loan WHERE status = 0)a, " +
        "(SELECT COUNT(0) tjCount FROM creditor_loan WHERE status = 1)b, " +
        "(SELECT COUNT(0) tbCount FROM creditor_invest WHERE status = 0)c, " +
        "(SELECT SUM(tran_price) sumTran FROM creditor_loan WHERE status = 0)d, " +
        "(SELECT SUM(disc_price) sumDisc FROM creditor_loan WHERE status = 0)e";
    //申请转让的列表
    var sql3 = "SELECT li.id, l.name, l.rate, (to_days(rr.repay_day) - to_days(now())) days, tt.repay_daycur, " +
        "li.money, li.create_time, l.repay_type, l.id loan_id, tt.period, l.accrue_time, tt.interest " +
        "FROM (SELECT i.id, i.loan_id, i.money, i.create_time FROM invest i UNION ALL SELECT ci.id, ci.loan_id, ci.money, ci.create_time " +
        "FROM creditor_invest ci) li LEFT JOIN loan l ON l.id = li.loan_id LEFT JOIN (SELECT (z.repay_day)repay_day, (z.loan_id)loan_id FROM " +
        "(SELECT * FROM loan_repay ORDER BY period DESC) z GROUP BY z.loan_id ORDER BY z.period DESC) rr ON li.loan_id = rr.loan_id " +
        "LEFT JOIN (SELECT (t.repay_day)repay_daycur,(t.period)period,(t.interest)interest,(t.loan_id)loan_id FROM loan_repay t " +
        "WHERE t.status = 0 GROUP BY t.loan_id ORDER BY period) tt " +
        "ON rr.loan_id = tt.loan_id";
    var sql5 = "";
    var sql = "SELECT * FROM creditor_config WHERE status = 0 LIMIT 1";

    var conn = dc.main.getConn();
    conn.execute(sql, [], function (err, data) {
        if (err) {
            console.log(err);
        }else {
            //检验债权规则所需要的数据
            buy_loan_days = data[0].buy_loan_days;
            creditor_min_money = data[0].creditor_min_money;
            sur_period_debx = data[0].sur_period_debx;
            sur_period_other = data[0].sur_period_other;
            tran_apply_cur_repay = data[0].tran_apply_cur_repay;
            console.log("债权配置的参数为：" + buy_loan_days + "," + creditor_min_money + "," + sur_period_debx + "," + sur_period_other);
            conn.execute(sql1, [], function (err, data) {
                if (err) {
                    console.log(err);
                }else {
                    investCount = data[0].investCount;
                    console.log("查询到的投资记录总数为：" + investCount);
                    //检验条件
                    conn.execute(sql3, [], function (err, data) {
                        //执行
                        if (err) {
                            console.log(err);
                        }else {
                            //console.log(data);
                            async.eachSeries(data, function (investObj, cb) {
                                var tranMoney = 0;
                                var id = investObj.id;
                                loan_id = investObj.loan_id;
                                days = investObj.days;
                                period = investObj.period;
                                interest = investObj.interest;
                                accrue_time = investObj.accrue_time;
                                repay_type = investObj.repay_type;
                                invest_time = moment(investObj.create_time).format("YYYY-MM-DD");
                                repay_daycur = moment(investObj.repay_daycur).format("YYYY-MM-DD");
                                repay_daycur2 = moment(investObj.repay_daycur).format("YYYY-MM-DD HH:mm");
                                if (curDay2 > repay_daycur2) {
                                    console.log("原标投资编号" + id + "日期错误");
                                    delete investObj;
                                    investCount--;
                                    cb(err);
                                }else {
                                    gap = creditorDateUtil.hourNumOfDate(curDay2, repay_daycur2);
                                    console.log("-----相隔的时间差为--------*****" + gap);
                                    if (gap < tran_apply_cur_repay) {
                                        console.log("原标投资编号" + id + "距当期还款日的时间不够");
                                        delete investObj;
                                        investCount--;
                                        cb(err);
                                    }else {
                                        ycxhAccurDate = moment(accrue_time).format('YYYY-MM-DD');
                                        if (period == 1) {
                                            preRepayDay = moment(accrue_time).format('YYYY-MM-DD');
                                        }else {
                                            preRepayDay = creditorDateUtil.dayNumOfMonth(repay_daycur);
                                        }
                                        console.log("************************");
                                        console.log(id + "," + invest_time + "," + repay_type + "," + loan_id + "," + days + "," + period + "," + repay_daycur2);
                                        //检验数据
                                        var sql7 = "SELECT SUM(total_price)total_price FROM creditor_loan WHERE invest_id = '" + id + "' OR creditor_invest_id = '" + id +"' AND status = 0";
                                        var sql8 = "SELECT SUM(tran_price)tran_price FROM creditor_loan WHERE invest_id = '" + id + "' OR creditor_invest_id = '" + id +"' AND status = 1";
                                        conn.execute(sql7, [], function (err, data) {
                                            if (err) {
                                                console.log(err);
                                            }else {
                                                if (data[0].total_price == null) {
                                                    data[0].total_price = 0;
                                                }
                                                console.log("转让中的总价值为：" + data[0].total_price);
                                                investObj.money -= data[0].total_price;
                                                conn.execute(sql8, [], function (err, data) {
                                                    if (err) {
                                                        console.log(err);
                                                    }else {
                                                        if (data[0].tran_price == null) {
                                                            data[0].tran_price = 0;
                                                        }
                                                        console.log("转让结束成功转让的总价值为：" + data[0].tran_price);
                                                        investObj.money -=  data[0].tran_price;
                                                        console.log("-------------------------");
                                                        tranMoney = investObj.money;
                                                        if (tranMoney < 0) {
                                                            console.log("原标投资编号" + id + "可转让金额错误，请人工审核");
                                                            //此条记录删除
                                                            delete investObj;
                                                            investCount--;
                                                            console.log("111111111111111111111111111111111111111");
                                                            cb(err);
                                                        }else {
                                                            console.log("原标投资编号" + id + "可转让的金额为：" + tranMoney);
                                                            //检验是否符合债转的规则
                                                            sqll = "SELECT * FROM repay_type WHERE id = '" + repay_type + "'";
                                                            sqll2 = "SELECT COUNT(0) debxCount FROM loan_repay WHERE loan_id = '" + loan_id + "' AND status = 0";
                                                            sqll3 = "SELECT SUM(money) surMoney FROM loan_repay WHERE loan_id = " + loan_id + " AND status =  0";
                                                            var inter_day = dateMathUtil.daysBetween(curDay, invest_time);
                                                            console.log("原标投资编号" + id + "所持债权的天数为：" + inter_day);
                                                            if (inter_day < buy_loan_days) {
                                                                console.log("原标投资编号" + id + "所持债权天数效验未通过");
                                                                delete investObj;
                                                                investCount--;
                                                                cb(err);
                                                            }else if (tranMoney < creditor_min_money) {
                                                                console.log("原标投资编号" + id + "可转让的余额不足");
                                                                delete investObj;
                                                                investCount--;
                                                                cb(err);
                                                            }else {
                                                                var surMoney;var midleDebxCreditorMoney;
                                                                conn.execute(sqll3, [], function (err, data) {
                                                                    if (err) {
                                                                        console.log(err);
                                                                    }else {
                                                                        surMoney = data[0].surMoney;
                                                                        midleDebxCreditorMoney = tranMoney/surMoney;
                                                                        //检验不同还款方式的期限
                                                                        conn.execute(sqll, [], function (err, data) {
                                                                            if (err) {
                                                                                console.log(err);
                                                                            }else {
                                                                                //查询期数
                                                                                console.log("原标投资编号" + id + "对应的还款方式为：" + data[0].type);
                                                                                if (data[0].type == "debx") {
                                                                                    console.log("还款方式为等额本息");
                                                                                    conn.execute(sqll2, [], function (err, data) {
                                                                                        if (err) {
                                                                                            console.log(err);
                                                                                        }else {
                                                                                            debxCount = data[0].debxCount;
                                                                                            console.log("原标投资编号" + id + "剩余的期数为：" + debxCount);
                                                                                            if (debxCount < sur_period_debx) {
                                                                                                console.log("原标投资编号" + id + "等额本息的剩余期数不足不符合债转规则");
                                                                                                delete investObj;
                                                                                                investCount--;
                                                                                                cb(err);
                                                                                            }else {
                                                                                                //计算债权价值
                                                                                                console.log("---------等额本息的债权价值为-----------");
                                                                                                var creditorDebxValue = creditorCalculateService.creditorValueDeMonth(repay_daycur, curDay, preRepayDay, tranMoney, interest, midleDebxCreditorMoney);
                                                                                                console.log("---------等额本息的债权价值为-----------" + creditorDebxValue);
                                                                                                investObj.creditor_value = creditorDebxValue;
                                                                                                arr.push(investObj);
                                                                                                cb(err);
                                                                                            }
                                                                                        }
                                                                                    });
                                                                                }else {
                                                                                    console.log("还款方式为其他形式");
                                                                                    if (days < sur_period_other) {
                                                                                        console.log("原标投资编号" + id + "其它还款的剩余期数不足不符合债转规则");
                                                                                        delete investObj;
                                                                                        investCount--;
                                                                                        cb(err);
                                                                                    }else {
                                                                                        if (data[0].type == "ayfx") {
                                                                                            console.log("还款方式为按月付息");
                                                                                            //计算债权价值
                                                                                            console.log("***********按月付息的债权价值为*****************");
                                                                                            var creditorAyfxValue = creditorCalculateService.creditorValueDeMonth(repay_daycur, curDay, preRepayDay, tranMoney, interest, midleDebxCreditorMoney);
                                                                                            console.log("***********按月付息的债权价值为*****************" + creditorAyfxValue);
                                                                                            investObj.creditor_value = creditorAyfxValue;
                                                                                            arr.push(investObj);
                                                                                            cb(err);
                                                                                        }else if (data[0].type == "ycxh") {
                                                                                            console.log("还款方式为一次性还本付息");
                                                                                            //计算债权价值
                                                                                            console.log("***********一次性还本付息的债权价值为*****************");
                                                                                            var creditorYcxhValue = creditorCalculateService.creditorValueYcxh(repay_daycur, curDay, ycxhAccurDate, tranMoney, interest, midleDebxCreditorMoney);
                                                                                            console.log("***********一次性还本付息的债权价值为*****************" + creditorYcxhValue);
                                                                                            investObj.creditor_value = creditorYcxhValue;
                                                                                            arr.push(investObj);
                                                                                            cb(err);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        });
                                                                    }
                                                                });
                                                            }
                                                        }
                                                    }
                                                });
                                            }
                                        });
                                    }
                                }
                            }, function (err) {
                                console.log("可转让的投资列表");
                                console.log("当前的时间为：" + curDay2);
                                console.log("剩下的记录数为：" + investCount);
                                //arr.slice(0,5);  截取区间的对象,判断数组越界
                                creditorBodyNode.rst = arr;
                                creditorBodyNode.count = investCount;
                                cb(null, creditorBodyNode);
                            });
                        }
                    }, {dateToString: true});
                }
            });
        }
    });
};

var creditorControl = new CreditorControl();
module.exports = creditorControl;