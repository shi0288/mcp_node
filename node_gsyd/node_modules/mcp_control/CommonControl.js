var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;

var cons = require('mcp_constants');
var userType = cons.userType;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var checkService = service.checkService;
var userService = service.userService;

var CommonControl = function () {
};

CommonControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM01 插入数据
 */

CommonControl.prototype.checkCM01 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.autoId == null || bodyNode.autoId == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.cond == null || bodyNode.cond == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第三步检查ID字段是否需要给值
        function (checkCb) {
            if (bodyNode.autoId) {
                bodyNode.cond.id = digestUtil.createUUID();
            }
            if (bodyNode.cond.id == null || bodyNode.cond.id == undefined) {
                //checkCb(ec.E3040);
                checkCb(null);
            } else {
                table.findOne({id: bodyNode.cond.id}, {id: 1}, [], function (err, data) {
                    if (data) {
                        checkCb(ec.E3050);
                    }
                    else {
                        checkCb(null);
                    }
                });
            }
        }
    ], function (err) {
        cb(err);
    });
};


CommonControl.prototype.handleCM01 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    table.save(bodyNode.cond, [], function (err) {
        if (err) {
            log.error(headNode.messageid + '保存信息出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM02  通过ID查询
 */

CommonControl.prototype.checkCM02 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }

    if (bodyNode.id == null || bodyNode.id == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.files, function (err) {
                checkCb(err);
            });
        }
    ], function (err) {
        cb(err);
    });
};

CommonControl.prototype.handleCM02 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var addition = {
        dateToString: true
    };
    table.findOne({id: bodyNode.id}, bodyNode.files, [], function (err, data) {
        if (data) {
            var bodyNodeBack = {};
            bodyNodeBack.entity = data;
            cb(err, bodyNodeBack);
        }
        else {
            cb(ec.E3000);
        }
    }, addition);
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM03 查询列表
 */

CommonControl.prototype.checkCM03 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有查询的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.fields, function (err) {
                checkCb(err);
            });
        },
        //第三步检查是否有条件字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第四步检查是否有排序的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.sort, function (err) {
                checkCb(err);
            });
        }
    ], function (err) {
        cb(err);
    });
};


CommonControl.prototype.handleCM03 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var cursor = table.find(bodyNode.cond, bodyNode.fields, []).sort(bodyNode.sort).limit(bodyNode.skip, bodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function (err, data) {
        if (err) {
            log.error("获取列表出错");
            cb(ec.E9999);
            return;
        }
        var backBodyNode = {};
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM04 根据ID编辑更新
 */

CommonControl.prototype.checkCM04 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.id == null || bodyNode.id == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.cond == null || bodyNode.cond == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有需要更新的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        //第三步检查是否有此ID的数据
        function (checkCb) {
            table.findOne({id: bodyNode.id}, {id: 1}, [], function (err, data) {
                if (data) {
                    checkCb(null);
                }
                else {
                    checkCb(ec.E3050);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};

CommonControl.prototype.handleCM04 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    table.update({id: bodyNode.id}, {$set: bodyNode.cond}, [], function (err) {
        if (err) {
            log.error(headNode.messageid + '更新记录出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM05 根据ID删除记录
 */

CommonControl.prototype.checkCM05 = function (headNode, bodyNode, cb) {

    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }

    if (bodyNode.id == null || bodyNode.id == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有此ID的数据
        function (checkCb) {
            table.findOne({id: bodyNode.id}, {id: 1}, [], function (err, data) {
                if (data) {
                    checkCb(null);
                }
                else {
                    checkCb(ec.E3060);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};

CommonControl.prototype.handleCM05 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    table.remove({id: bodyNode.id}, [], function (err) {
        if (err) {
            log.error(headNode.messageid + '删除记录出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM06 根据条件查询
 */

CommonControl.prototype.checkCM06 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
            //第一步检查是否有这张表
            function (checkCb) {
                if (table == undefined) {
                    checkCb(ec.E3030);
                } else {
                    checkCb(null);
                }
            },
            //第二步检查是否有查询的字段
            function (checkCb) {
                checkService.checkTableColumn(table, bodyNode.fields, function (err) {
                    checkCb(err);
                });
            },
            //第三步检查是否有条件字段
            function (checkCb) {
                checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                    checkCb(err);
                });
            },
            //第四步检查是否有排序的字段
            function (checkCb) {
                checkService.checkTableColumn(table, bodyNode.sort, function (err) {
                    checkCb(err);
                });
            }
        ],
        function (err) {
            cb(err);
        })
};

CommonControl.prototype.handleCM06 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var cursor = table.find(bodyNode.cond, bodyNode.fields, []).sort(bodyNode.sort).limit(null, null, true);
    cursor.dateToString();
    cursor.toArray(function (err, data) {
        if (err) {
            log.error("获取列表出错");
            cb(ec.E9999);
            return;
        }
        var backBodyNode = {};
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM07 用户管理
 */

CommonControl.prototype.checkCM07 = function (headNode, bodyNode, cb) {
    cb(null);
};

CommonControl.prototype.handleCM07 = function (headNode, bodyNode, cb) {
    userService.getUserList(bodyNode.fields, bodyNode.skip, bodyNode.limit, function (err, data) {
        if (err) {
            cb(ec.E9999);
        } else {
            var backNode = {};
            backNode.rst = data;
            userService.getUserCount(bodyNode.fields, bodyNode.skip, bodyNode.limit, function (err, data) {
                if (err) {
                    cb(ec.E9999);
                } else {
                    backNode.count = data[0]['count'];
                    cb(null, backNode);
                }
            })

        }
    })
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM08 根据属性删除
 */

CommonControl.prototype.checkCM08 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查参数是否完整
    if (bodyNode.cond == null || bodyNode.cond == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查是否有这张表
    var table = dc.main.get(bodyNode.table);
    if (table == undefined) {
        cb(ec.E3030);
        return;
    }
    cb(null);
};


CommonControl.prototype.handleCM08 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    table.remove(bodyNode.cond, [], function (err) {
        if (err) {
            log.error(headNode.messageid + '删除记录出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};



/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  CM09 根据ID编辑更新
 */

CommonControl.prototype.checkCM09 = function (headNode, bodyNode, cb) {
    //检查参数是否完整
    if (bodyNode.table == null || bodyNode.table == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.cond == null || bodyNode.cond == undefined) {
        cb(ec.E3070);
        return;
    }
    if (bodyNode.field == null || bodyNode.field == undefined) {
        cb(ec.E3070);
        return;
    }
    //检查表中是否有这个字段
    var table = dc.main.get(bodyNode.table);
    async.waterfall([
        //第一步检查是否有这张表
        function (checkCb) {
            if (table == undefined) {
                checkCb(ec.E3030);
            } else {
                checkCb(null);
            }
        },
        //第二步检查是否有需要更新的字段
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.cond, function (err) {
                checkCb(err);
            });
        },
        function (checkCb) {
            checkService.checkTableColumn(table, bodyNode.field, function (err) {
                checkCb(err);
            });
        }
    ], function (err) {
        cb(err);
    });
};

CommonControl.prototype.handleCM09 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    table.update(bodyNode.cond, {$set: bodyNode.field}, [], function (err) {
        if (err) {
            log.error(headNode.messageid + '更新记录出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};






var commonControl = new CommonControl();
module.exports = commonControl;


function start() {
    console.log("Request handler 'start' was called.");
    function sleep(milliSeconds) {
        var startTime = new Date().getTime();
        while (new Date().getTime() < startTime + milliSeconds);
    }

    sleep(10000);
    return "Hello Start";
}
function upload() {
    console.log("Request handler 'upload' was called.");
    return "Hello Upload";
}
exports.start = start;
exports.upload = upload;


var exec = require("child_process").exec;
function start() {
    console.log("Request handler 'start' was called.");
    var content = "empty";
    exec("ls -lah", function (error, stdout, stderr) {
        content = stdout;
    });
    return content;
}
function upload() {
    console.log("Request handler 'upload' was called.");
    return "Hello Upload";
}
exports.start = start;
exports.upload = upload;
