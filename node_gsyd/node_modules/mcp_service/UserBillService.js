var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userBillCons = cons.userBillCons;

var async = require('async');


var esut = require('easy_util');
var dateUtil = esut.dateUtil;


var UserBillService = function () {
};

UserBillService.prototype.getLastestBill = function (userId, cb) {
    var self = this;
    var userBillTab = dc.main.get('user_bill');
    var cursor = userBillTab.find({user_id: userId}, {}, []).sort({seq_num: 0}).limit(0, 1);
    async.waterfall([
        function (cb) {
            cursor.dateToString();
            cursor.toArray(function (err, data) {
                if (err) {
                    cb(err);
                } else {
                    if (data.length == 1) {
                        var bill = data[0];
                        cb(err, bill);
                    } else {
                        cb(err, null);
                    }
                }
            });
        }
    ], function (err, rst) {
        cb(err, rst);
    });
};

//
///**
// * 冻结金额
// *
// * @param userId
// *            用户的id
// * @param money
// *            金额
// * @param operatorInfo
// *            资金转移的操作类型
// * @param operatorDetail
// *            资金转移的详述
// */
//
//
//UserBillService.prototype.freezeMoney = function (userId, money, operatorInfo, operatorDetail, cb) {
//    var self = this;
//    if (money < 0) {
//        cb(true);
//        return;
//    }
//    var userBillTab = dc.main.get('user_bill');
//    userBillTab.lock('user',userId,function (conn,cb) {
//        self.getLastestBill(userId, function (err, userBillLaste) {
//            if (err) {
//                cb(true);
//            } else {
//                var cond = {};
//                cond.id = digestUtil.createUUID();
//                cond.money = money;
//                cond.time = new Date();
//                cond.detail = operatorDetail;
//                cond.type = userBillCons.type.FREEZE;
//                cond.type_info = operatorInfo;
//                cond.user_id = userId;
//                if (userBillLaste) {
//                    cond.seq_num = userBillLaste.seq_num + 1;
//                    cond.balance = arithUtil.sub(userBillLaste.balance, money);
//                    cond.frozen_money = arithUtil.add(userBillLaste.frozen_money, money);
//                } else {
//                    cond.seq_num = 1;
//                    cond.balance = 0;
//                    cond.frozen_money = 0;
//                }
//                userBillTab.save(cond,[],function(err,data){
//                    cb(err,data);
//                },conn);
//            }
//        })
//    }, cb);
//};

/**
 * 冻结金额
 *
 * @param userId
 *            用户的id
 * @param money
 *            金额
 * @param operatorInfo
 *            资金转移的操作类型
 * @param operatorDetail
 *            资金转移的详述
 */
UserBillService.prototype.frozenMoney = function (userId, curMoney, payType, description, cb) {
    var userTab = dc.main.get('user');
    userTab.findOne({id: userId}, {}, [], function (err, user) {
        var accountTab = dc.main.get('account');
        accountTab.findOne({user_id: userId}, {money: 1, frozen_money: 1}, [], function (err, account) {
            var frozen_money = account.frozen_money + curMoney;
            var money = account.money - curMoney;
            var cond = {};
            cond.transType = userBillCons.transType.FROZEN;
            cond.payType = payType;
            cond.description = description;
            cond.money = curMoney;
            cond.proMoney = account.money;
            cond.afterMoney = money;
            cond.frozenMoney = frozen_money;
            cond.create_time = new Date().getTime();
            cond.user_id = userId;
            cond.username = user.username;
            var userBillTab = dc.mg.get('userbill');
            userBillTab.save(cond, [], function (err, _r1) {
                accountTab.update({user_id: userId}, {
                    $set: {
                        money: money,
                        frozen_money: frozen_money,
                        update_time: dateUtil.getCurTime()
                    }
                }, [], function (err, _r2) {
                    if (err) {
                        cb(true);
                    } else {
                        cb(null);
                    }
                })
            });
        });
    });
};


/**
 * 从冻结金额中转出
 *
 * @param userId
 *            用户的id
 * @param money
 *            金额
 * @param operatorInfo
 *            资金转移的操作类型
 * @param operatorDetail
 *            资金转移的详述
 */
UserBillService.prototype.frozenOutMoney = function (userId, curMoney, payType, description, cb) {
    var userTab = dc.main.get('user');
    userTab.findOne({id: userId}, {}, [], function (err, user) {
        var accountTab = dc.main.get('account');
        accountTab.findOne({user_id: userId}, {money: 1, frozen_money: 1}, [], function (err, account) {
            var frozen_money = account.frozen_money - curMoney;
            var money = account.money;
            var cond = {};
            cond.transType = userBillCons.transType.FROZEN_OUT;
            cond.payType = payType;
            cond.description = description;
            cond.money = curMoney;
            cond.proMoney = account.money;
            cond.afterMoney = money;
            cond.frozenMoney = frozen_money;
            cond.create_time = new Date().getTime();
            cond.user_id = userId;
            cond.username = user.username;
            var userBillTab = dc.mg.get('userbill');
            userBillTab.save(cond, [], function (err, _r1) {
                accountTab.update({user_id: userId}, {
                    $set: {
                        frozen_money: frozen_money,
                        update_time: dateUtil.getCurTime()
                    }
                }, [], function (err, _r2) {
                    if (err) {
                        cb(true);
                    } else {
                        cb(null);
                    }
                })
            });
        });
    });
};


/**
 * 转入到余额
 *
 * @param userId
 *            用户的id
 * @param money
 *            金额
 * @param operatorInfo
 *            资金转移的操作类型
 * @param operatorDetail
 *            资金转移的详述
 */
UserBillService.prototype.balanceInMoney = function (userId, curMoney, payType, description, cb) {
    var userTab = dc.main.get('user');
    userTab.findOne({id: userId}, {}, [], function (err, user) {
        var accountTab = dc.main.get('account');
        accountTab.findOne({user_id: userId}, {money: 1, frozen_money: 1}, [], function (err, account) {
            var frozen_money = account.frozen_money;
            var money = account.money + curMoney;
            var cond = {};
            cond.transType = userBillCons.transType.IN;
            cond.payType = payType;
            cond.description = description;
            cond.money = curMoney;
            cond.proMoney = account.money;
            cond.afterMoney = money;
            cond.frozenMoney = frozen_money;
            cond.create_time = new Date().getTime();
            cond.user_id = userId;
            cond.username = user.username;
            var userBillTab = dc.mg.get('userbill');
            userBillTab.save(cond, [], function (err, _r1) {
                accountTab.update({user_id: userId}, {
                    $set: {
                        money: money,
                        update_time: dateUtil.getCurTime()
                    }
                }, [], function (err, _r2) {
                    if (err) {
                        cb(true);
                    } else {
                        cb(null);
                    }
                })
            });
        });
    });
};



/**
 * 转出余额
 *
 * @param userId
 *            用户的id
 * @param money
 *            金额
 * @param operatorInfo
 *            资金转移的操作类型
 * @param operatorDetail
 *            资金转移的详述
 */
UserBillService.prototype.balanceOMoney = function (userId, curMoney, payType, description, cb) {
    var userTab = dc.main.get('user');
    userTab.findOne({id: userId}, {}, [], function (err, user) {
        var accountTab = dc.main.get('account');
        accountTab.findOne({user_id: userId}, {money: 1, frozen_money: 1}, [], function (err, account) {
            var frozen_money = account.frozen_money;
            var money = account.money - curMoney;
            var cond = {};
            cond.transType = userBillCons.transType.OUT;
            cond.payType = payType;
            cond.description = description;
            cond.money = curMoney;
            cond.proMoney = account.money;
            cond.afterMoney = money;
            cond.frozenMoney = frozen_money;
            cond.create_time = new Date().getTime();
            cond.user_id = userId;
            cond.username = user.username;
            var userBillTab = dc.mg.get('userbill');
            userBillTab.save(cond, [], function (err, _r1) {
                accountTab.update({user_id: userId}, {
                    $set: {
                        money: money,
                        update_time: dateUtil.getCurTime()
                    }
                }, [], function (err, _r2) {
                    if (err) {
                        cb(true);
                    } else {
                        cb(null);
                    }
                })
            });
        });
    });
};




module.exports = new UserBillService();