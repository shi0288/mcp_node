/**
 * Created by shiqm on 16-4-21.
 */
'use strict';

var cons = require('mcp_constants');
var calCons = cons.calculateCons;
var moment = require('moment');

var esut = require('easy_util');
var dateUtil = esut.dateUtil;

var util = require('mcp_util');
var dateMathUtil = util.dateMathUtil;


var CalculateService = function () {
};

/**
 * 按天计算利息
 * @param days
 * @param rate
 * @param investMoney
 * @returns {number}
 */
CalculateService.prototype.daysCal = function (days, rate, investMoney) {
    //利息*投资金额/整年天数   其中利息先转为整数，最后再除以
    return Math.round(rate * 100 * investMoney / calCons.year_days_num * days / 100);
};


/**
 * 计算每月利息
 * @param rate
 * @param investMoney
 * @returns {number}
 */
CalculateService.prototype.monthCal = function (rate, investMoney) {
    //金额*利率/12==一个月的利息
    return Math.round(rate * 100 * investMoney / 12 / 100);
};

/**
 * 等额本息，计算每月还款额
 * @param rate
 * @param investMoney
 * @returns {number}
 */
CalculateService.prototype.deMonthSumCal = function (rate, investMoney, tempDeadline) {
    return Math.round((investMoney * (rate / 12) * Math.pow(
        (1 + rate / 12), tempDeadline))
        / (Math.pow((1 + rate / 12), tempDeadline) - 1), 2);
};

/**
 *  等额本息，计算每月利息
 * @param rate
 * @param investMoney
 * @param everyMonthRepayMoney
 * @param i
 * @returns {number}
 */
CalculateService.prototype.deMonthInterestCal = function (rate, investMoney, everyMonthRepayMoney, i) {
    return Math
        .round((investMoney * (rate / 12) - everyMonthRepayMoney) * Math.pow((1 + (rate / 12)), i - 1) + everyMonthRepayMoney);
};


CalculateService.prototype.jt = function (investObj, raise_time) {
    var self = this;
    var jtRate;
    if (investObj.st_rate != undefined) {
        jtRate = investObj.st_rate;
    } else {
        jtRate = investObj.rate;
    }
    var days = 0;
    if (raise_time == undefined) {
        days = dateMathUtil.daysBetween(dateUtil.getCurTime(true), dateUtil.transFormat(investObj.create_time));
    } else {
        days = dateMathUtil.daysBetween(dateUtil.transFormat(raise_time), dateUtil.transFormat(investObj.create_time));
    }
    return self.daysCal(days, jtRate, investObj.money);

};


CalculateService.prototype.outDebxCal = function (loanObj) {
    var self = this;
    var loanRepayObjArr = new Array(loanObj.deadline);
    var outRepayObjArr = new Array(loanObj.live_deadline);
    var outLoanEveryMonthRepayMoney = self.deMonthSumCal(loanObj.rate, loanObj.live_money, loanObj.live_deadline);
    var outCurLoanMoney = 0;
    for (var i = 0; i < loanObj.live_deadline; i++) {
        var liveLoanPeriod = i + 1;
        outRepayObjArr[i] = {};
        //计算利息
        var outLoanInterest = self.deMonthInterestCal(loanObj.rate, loanObj.live_money, outLoanEveryMonthRepayMoney, liveLoanPeriod);
        //计算本金
        var out_money = outLoanEveryMonthRepayMoney - outLoanInterest;
        outCurLoanMoney += out_money;
        if (liveLoanPeriod == loanObj.live_deadline) {
            out_money = out_money + (loanObj.live_money - outCurLoanMoney);
        }
        outRepayObjArr[i].money = out_money;
        outRepayObjArr[i].interest = outLoanInterest;
    }
    for (var i = 0; i < loanObj.deadline; i++) {
        var loanPeriod = i + 1;
        var outLoanPeriod = loanObj.live_deadline - loanObj.deadline + i;
        loanRepayObjArr[i] = {};
        loanRepayObjArr[i].id = loanObj.id + '_' + (i + 1);
        loanRepayObjArr[i].repay_day = dateMathUtil.dateMonthAdd(loanObj.final_time, loanObj.day_month, -loanObj.deadline + loanPeriod);
        if (loanPeriod == 1) {
            //***日利息=[（第一次返息日-线上起息日）/（第一次返息日-线下起息日）] * 第一期应还利息
            //计息日到第一次还款日时间差
            var firstMoneyDaysNum = dateMathUtil.daysBetween(loanRepayObjArr[i].repay_day, loanObj.accrue_time);
            //上一次线下还款日到第一次还款日时间差
            var outRepayTime = dateMathUtil.dateMonthAdd(loanObj.final_time, loanObj.day_month, -loanObj.deadline);
            var firstMoneyOutDaysNum = dateMathUtil.daysBetween(loanRepayObjArr[i].repay_day, outRepayTime);
            loanRepayObjArr[i].interest = Math.round(firstMoneyDaysNum / firstMoneyOutDaysNum * outRepayObjArr[outLoanPeriod].interest);
            //loanRepayObjArr[i].money = Math.round(firstMoneyDaysNum / firstMoneyOutDaysNum * outRepayObjArr[outLoanPeriod].money);
            loanRepayObjArr[i].money = outRepayObjArr[outLoanPeriod].money;

        } else {
            loanRepayObjArr[i].interest = outRepayObjArr[outLoanPeriod].interest;
            loanRepayObjArr[i].money = outRepayObjArr[outLoanPeriod].money;
        }
        loanRepayObjArr[i].loan_id = loanObj.id;
        loanRepayObjArr[i].period = loanPeriod;
        loanRepayObjArr[i].all_period = loanObj.deadline;
        loanRepayObjArr[i].st_interest = 0;
        loanRepayObjArr[i].status = 0;//0为还款  1已还
    }
    return loanRepayObjArr;

};


CalculateService.prototype.outRhjfAyfx = function (loanObj, moneyTemp) {
    var self = this;
    var loanRepayObjArr = new Array();
    var money = loanObj.money;
    if (moneyTemp != undefined) {
        money = moneyTemp;
    }
    var everyMonthInterest = self.monthCal(loanObj.rate, money);
    //起息日小于每月还款日
    var finalTime = loanObj.final_time;
    var accrueTime = loanObj.accrue_time;
    //人和还款日
    var everyday = loanObj.rhday;
    //每月还款日
    var day_month = loanObj.day_month;
    //最后返息日当天
    var deadline = 1;
    var monthNum = dateMathUtil.dateDiff('m', finalTime, accrueTime) + 1;
    var m = 0;
    var finalPeriod = {};
    finalPeriod.money = money;
    finalPeriod.interest = 0;
    finalPeriod.repay_day = finalTime;
    loanRepayObjArr.push(finalPeriod);
    for (var i = monthNum; i > 0; i--) {
        var temp = dateMathUtil.dateMonthAdd(finalTime, everyday, m);
        var tempAccTime = dateMathUtil.dateMonthAdd(finalTime, day_month, m);
        if (monthNum == 1) {
            var firstPeriodObj = {};
            firstPeriodObj.repay_day = accrueTime;
            firstPeriodObj.money = 0;
            var tempAccTimeNext = dateMathUtil.dateMonthAdd(finalTime, day_month, m - 1);
            var dayNum = dateMathUtil.dateDiff('d', tempAccTime, accrueTime);
            var dayNumOut = dateMathUtil.dateDiff('d', tempAccTime, tempAccTimeNext) - 1;
            firstPeriodObj.interest = Math.round(dayNum / dayNumOut * everyMonthInterest);
            loanRepayObjArr.push(firstPeriodObj);
            deadline++;
            continue;
        }
        if (m == 0) {
            //如果最后还款日大于返息日为同一天
            if (dateMathUtil.dateDiff('d', temp, finalTime) < 0) {
                var finalChildPeriod = {};
                finalChildPeriod.repay_day = temp;
                finalChildPeriod.interest = everyMonthInterest;
                finalChildPeriod.money = 0;
                loanRepayObjArr.push(finalChildPeriod);
                deadline++;
            }
            //如果最后还款日和返息日为同一天
            else if (dateMathUtil.dateDiff('d', temp, finalTime) == 0) {
                finalPeriod.interest = everyMonthInterest;
            } else {
                //判断当期利息是否在上一期范围内
                var tempFirstRepayTime = dateMathUtil.dateMonthAdd(finalTime, everyday, -i + 1);
                if (dateMathUtil.dateDiff('d', tempFirstRepayTime, accrueTime) == 0) {
                    finalPeriod.interest = everyMonthInterest;
                }
            }
        } else if (i == 1) {
            if (dateMathUtil.dateDiff('d', accrueTime, tempAccTime) > 0) {
                var tempAccDay = accrueTime.getDate();
                var realRepayDay = temp.getDate();
                if (tempAccDay <= realRepayDay) {
                    //正常第一期
                    var periodObj = {};
                    periodObj.repay_day = temp;
                    periodObj.money = 0;
                    var preAccTime = dateMathUtil.dateMonthAdd(finalTime, day_month, m + 1);
                    var dayNum = dateMathUtil.dateDiff('d', preAccTime, accrueTime);
                    var dayNumOut = dateMathUtil.dateDiff('d', preAccTime, tempAccTime);
                    if (dateMathUtil.dateDiff('d', preAccTime, dateMathUtil.dateAdd('d',finalTime,1)) == 0) {
                        dayNum = dayNum - 1;
                        dayNumOut = dayNumOut - 1;
                    }
                    console.log(dayNum);
                    console.log(dayNumOut);
                    console.log(everyMonthInterest);
                    periodObj.interest = Math.round(dayNum / dayNumOut * everyMonthInterest);
                    loanRepayObjArr.push(periodObj);
                    deadline++;
                }
            } else if (dateMathUtil.dateDiff('d', accrueTime, tempAccTime) == 0) {
            } else {
                //本次为整月
                var periodObj = {};
                periodObj.repay_day = temp;
                periodObj.money = 0;
                periodObj.interest = everyMonthInterest;
                loanRepayObjArr.push(periodObj);
                deadline++;
                //下月不满，为起息日开始还款
                var firstPeriodObj = {};
                firstPeriodObj.repay_day = accrueTime;
                firstPeriodObj.money = 0;
                var tempAccTimeNext = dateMathUtil.dateMonthAdd(finalTime, day_month, m - 1);
                var dayNum = dateMathUtil.dateDiff('d', tempAccTime, accrueTime);
                var dayNumOut = dateMathUtil.dateDiff('d', tempAccTime, tempAccTimeNext);
                firstPeriodObj.interest = Math.round(dayNum / dayNumOut * everyMonthInterest);
                loanRepayObjArr.push(firstPeriodObj);
                deadline++;
            }
        } else {
            var periodObj = {};
            periodObj.repay_day = temp;
            periodObj.money = 0;
            periodObj.interest = everyMonthInterest;
            loanRepayObjArr.push(periodObj);
            deadline++;
        }
        m--;
    }
    loanRepayObjArr.reverse();
    return loanRepayObjArr;

};


var calculateService = new CalculateService();
module.exports = calculateService;