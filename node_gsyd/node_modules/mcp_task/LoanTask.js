/**
 * Created by shiqm on 16-4-11.
 */
'use strict';
var dc = require('mcp_db').dc;
var CronJob = require('cron').CronJob;
var async = require('async');
var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var log = esut.log;

var cons = require('mcp_constants');
var taskCons = cons.taskCons;
var loanStatus = cons.loanStatus;

var moment = require('moment');

var engine = require('mcp_engine');
var ycxhEngine = engine.ycxhEngine;
var ayfxEngine = engine.ayfxEngine;
var debxEngine = engine.debxEngine;
var ycxhOutEngine = engine.ycxhOutEngine;
var ayfxOutEngine = engine.ayfxOutEngine;
var debxOutEngine = engine.debxOutEngine;

var zq = require('mcp_zq');
var creditorService = zq.creditorService;

var service = require('mcp_service');
var creditorCalculateService = service.creditorCalculateService;

var util = require('mcp_util');
var creditorDateUtil = util.creditorDateUtil;

var LoanTask = function () {
};


LoanTask.prototype.run = function () {
    var self = this;
    self.checkRaiseTime.start();
    self.calculateRepayPlan.start();
    self.terminalCreditorPlan.start();
    log.info("定时任务处理已启动");
};


/**
 * 检查项目募集时间到期
 */
LoanTask.prototype.checkRaiseTime = new CronJob('*/5 * * * * *', function () {
    var task = dc.mg.get('task');
    task.findAndRemove({
        fireTime: {$lte: new Date().getTime(), $exists: true},
        type: taskCons['recheck']
    }, {}, [], function (err, data) {
        if (data == null) {
        } else {
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: data.loan_id}, {status: 1}, [], function (err, findLoan) {
                if (err) {
                    log.error("出错:定时任务查找项目信息出错:" + data.loan_id);
                } else {
                    if (findLoan == undefined) {
                        log.error("出错:定时任务没有查找到项目信息:" + data.loan_id);
                        return;
                    }
                    if (findLoan.status == loanStatus.raising) {
                        loanTab.update({id: data.loan_id}, {$set: {status: loanStatus.recheck}}, [], function (err, rst) {
                            if (err) {
                                log.error("出错:定时任务更改项目状态:" + data.loan_id);
                            } else {
                                log.info("定时任务更改项目状态:" + data.loan_id);
                            }
                        })
                    } else {
                        log.error("已经通过满标修改状态:定时任务不再更改:" + data.loan_id);
                    }
                }
            });
        }
    });
}, null, false);

/**
 * 生成还款计划
 */
LoanTask.prototype.calculateRepayPlan = new CronJob('*/10 * * * * *', function () {
    var task = dc.mg.get('task');
    task.findAndRemove({
        fireTime: {$lte: new Date().getTime(), $exists: true},
        type: taskCons['calculate']
    }, {}, [], function (err, data) {
        if (data == null) {
        } else {
            var loanTab = dc.main.get('loan');
            loanTab.findOne({id: data.loan_id}, {}, [], function (err, findLoan) {
                if (err) {
                    log.error("出错:定时任务生成还款计划出错:" + data.loan_id);
                } else {
                    if (findLoan == undefined) {
                        log.error("出错:定时任务生成还款计划没有查找到项目信息:" + data.loan_id);
                        return;
                    }
                    if (findLoan.status == loanStatus.repaying) {
                        var repay_typeTab = dc.main.get('repay_type');
                        repay_typeTab.findOne({id: findLoan.repay_type}, {}, [], function (err, repay_typeObj) {
                            switch (repay_typeObj.type) {
                                //一次性还本付息
                                case 'ycxh':
                                    ycxhEngine.start(findLoan, repay_typeObj, function (err) {
                                        console.log(err);
                                    });
                                    break;
                                //按月付息
                                case 'ayfx':
                                    ayfxEngine.start(findLoan, repay_typeObj, function (err) {
                                        console.log(err);
                                    });
                                    break;
                                //等额本息
                                case 'debx':
                                    debxEngine.start(findLoan, repay_typeObj, function (err) {
                                        console.log(err);
                                    });
                                    break;
                                //线下一次性还本付息
                                case 'out_ycxh':
                                    ycxhOutEngine.start(findLoan, repay_typeObj, function (err) {
                                        console.log(err);
                                    });
                                    break;
                                //线下按月付息，到期换本
                                case 'out_ayfx':
                                    ayfxOutEngine.start(findLoan, repay_typeObj, function (err) {
                                        console.log(err);
                                    });
                                    break;
                                //线下等额本息
                                case 'out_debx':
                                    debxOutEngine.start(findLoan, repay_typeObj, function (err) {
                                        console.log(err);
                                    });
                                    break;
                                default:
                            }
                        });
                    } else {
                        log.error("已经通过满标修改状态:定时任务不再更改:" + data.loan_id);
                    }
                }
            });
        }
    });
}, null, false);

/**
 *终止债权标
 */
LoanTask.prototype.terminalCreditorPlan = new CronJob('*/50 * * * * *', function () {
    var creditor_loanTab = dc.main.get('creditor_loan');
    var cursor = creditor_loanTab.find({status: 0}, {}, []).sort({create_time: 1});
    cursor.dateToString();
    cursor.toArray(function (err, data) {
        async.eachSeries(data, function (creditor_loanObj, cb) {
            var end_time = moment(creditor_loanObj.end_time).format('YYYY-MM-DD HH:mm:ss');
            var now = moment().format('YYYY-MM-DD HH:mm:ss');
            //测试时间
            var termi_time = dateUtil.getCurTime();
            if (now > end_time) {
                creditor_loanTab.update({id: creditor_loanObj.id}, { $set: {status: 1, termi_time: termi_time}}, [], function (err) {
                    if (err) {
                        console.log(err);
                    }else {
                        cb(err);
                    }
                } );
            }
        }, function (err) {
            console.log("结束执行");
        });
    });
}, null, false);

/**
 * 更新债权价值
 * 凌晨执行一次
 */
LoanTask.prototype.terminalCreditorPlan = new CronJob('*/10 * * * * *', function () {
    var creditor_loanTab = dc.main.get('creditor_loan');
    var loanTab = dc.main.get('loan');
    var cursor = creditor_loanTab.find({status: 10}, {}, []).sort({create_time: 1});
    cursor.dateToString();
    cursor.toArray(function (err, data) {
        var preRepayDay = new Date();
        async.eachSeries(data, function (creditor_loanObj, cb) {
            //console.log(creditor_loanObj);
            var loan_id = creditor_loanObj.loan_id;
            var repay_type = creditor_loanObj.creditor_type;
            var creditor_loan_id = creditor_loanObj.id;
            loanTab.findOne({id: loan_id}, {}, [], function (err , loanObj) {
                if (err) {
                    console.log(err);
                }else {
                    creditorService.getCurRepayDay(loan_id, function (err, data) {
                        var curDay = moment(new Date()).format('YYYY-MM-DD');
                        var curDay2 = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');
                        var curRepayDay = moment(data.repay_day).format('YYYY-MM-DD');
                        if (data.period == 1) {
                            preRepayDay = loanObj.accrue_time.Format("yyyy-MM-dd");
                        }else {
                            preRepayDay = creditorDateUtil.dayNumOfMonth(curRepayDay);
                        }
                        var money = creditor_loanObj.total_price - creditor_loanObj.tran_price;
                        var interest = data.interest;
                        //计算债权价值
                        var creditorValue1 = creditorCalculateService.creditorValueDeMonth(curRepayDay, curDay, preRepayDay, money, interest);
                        creditorService.getSumCreditor(creditor_loan_id, function (err, data) {
                            if (data == null) {
                                data = 0.00;
                            }
                            var creditorValue2 = data;
                            var creditorValue = creditorDateUtil.twoPrecise(creditorValue1 + creditorValue2);
                            if (err) {
                                console.log(err);
                            }else {
                                //更新债权价值
                                creditor_loanTab.update({id: creditor_loan_id}, {$set: {creditor_value_update: creditorValue}}, [], function (err) {
                                    if (err) {
                                        console.log(err);
                                    }else {
                                        cb(err);
                                    }
                                });
                            }
                        });
                    });
                }
            });
        }, function (err) {
           console.log("更新完成");
        });
    });
}, null, false);

var loanTask = new LoanTask();
module.exports = loanTask;